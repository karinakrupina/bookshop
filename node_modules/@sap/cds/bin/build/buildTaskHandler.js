const fs = require('fs-extra')
const path = require('path')

class BuildTaskHandler {
    constructor(name, task, buildOptions) {
        task.options = task.options || {}

        this._name = name
        this._task = task
        this._buildOptions = buildOptions || {}
        this._written = []
    }

    get name() {
        return this._name;
    }
    get logger() {
        return this._logger;
    }
    set logger(logger) {
        this._logger = logger;
    }
    set cds(cds) {
        this._cds = cds;
    }
    get cds() {
        return this._cds
    }
    get env() {
        return this._cds.env
    }
    get task() {
        return this._task
    }
    get buildOptions() {
        return this._buildOptions
    }
    get written() {
        return this._written
    }

    build() {
        return Promise.resolve()
    }

    clean() {
        if (this.task.src === this.task.dest) {
            return Promise.resolve()
        }
        return fs.remove(this.task.dest)
    }

    write(data) {
        return {
            to: (dest) => {
                this._written.push(dest)
                return fs.outputFile(dest, typeof data === "object" ? JSON.stringify(data, null, 2) : data)
            }
        }
    }

    copy(source) {
        return {
            to: (dest) => {
                this._written.push(dest)
                return fs.copy(source, dest)
            }
        }
    }

    _copyNativeContent(srcDir, destDir, filter) {
        if (srcDir === destDir) {
            return Promise.resolve()
        }

        const files = this._find(srcDir, (src) => {
            return src !== destDir && (!filter || filter.call(this, src))
        })

        return Promise.all(
            files.map((srcFile) => {
                let relFile = path.relative(srcDir, srcFile)
                let destFile = path.join(destDir, relFile)
                return this.copy(srcFile).to(destFile)
            })
        )
    }

    _find(sourceDir, filter) {
        const files = []
        this._traverseFileSystem(sourceDir, files, filter)

        return files;
    }

    _traverseFileSystem(sourceDir, files, filter) {
        fs.readdirSync(sourceDir).map((subDirEntry) => path.join(sourceDir, subDirEntry)).forEach((entry) => {
            var stats = fs.statSync(entry)
            if (stats.isDirectory() && (!filter || filter.call(this, entry))) {
                this._traverseFileSystem(entry, files, filter)
            }
            if (stats.isFile() && (!filter || filter.call(this, entry))) {
                files.push(entry)
            }
        })
    }
}

module.exports = BuildTaskHandler
