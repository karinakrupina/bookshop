const { relative, sep } = require ('path')
function _local (filename) { return relative('', filename) }
const cds = require ('../index')
const assetDir = cds.env.folders.app
const { PORT=4004 } = process.env


// standard express server.js setup...
const express = require('express'), app = express()
app.use (express.static(assetDir))
app.use ((req,res,next)=>{ console.log (req.method, req.url); next() })
app.get ('/*/webapp/*', (req,res) => res.status(400).send())
app.get ('/\\$index', (req,res) => res.send (index.html))
app.get ('/', (req,res) => res.send (index.html))  //> if there is none in ./app

app.listen (PORT, ()=> {
    console.log (`\n[cds] - server listens at http://localhost:${PORT}`)
    console.log (`[cds] - serving static resources from .${sep}${assetDir}`)
})

// bootstrap cds services...
app.serve = (all) => Promise.resolve (console.time (`[cds] - launched in`))
.then (()=> cds.env.requires.db && cds.connect())
.then (()=> cds.serve(all).in(app)
    .on ('add', _logService)
    .on ('done', _logModels)
).then (()=> console.timeEnd (`[cds] - launched in`))


// ------------------------------------------------------------------

/** Log each constructed service */
function _logService ({name,path,impl}) {
    console.log (`[cds] - serving ${name} at ${path}${impl ? ' - impl: ' + _local(impl._source) : ''}`)
}

/** Log all added services */
function _logModels ({_sources}) {
    console.log (`[cds] - service definitions loaded from:\n\n  ${_sources.map(_local).join('\n  ')}\n`)
}

/** Helper: in-place index.html */
const index = { get html(){

    if (index._html)  return index._html

    let [,cmd] = process.argv
    if (!cmd || cmd.endsWith('cds'))  cmd = 'cds'
    if (!cmd || cmd.endsWith('cds/bin/run.js'))  cmd = 'cds run in '+ process.cwd()

    return index._html = `
    <html>
        <body style="margin: 44px; font-family: xChalkboard, sans-serif">
            <h1 style="font-weight:200">Welcome to <i>cds.services</i></h1>
            <p> These are the services and entities currently served through
            <br><i>${cmd} ${process.argv.slice(2).join(' ')}</i>...
            ${ cds.service.providers.map (service => {
                const srv = service.path
                return `
                <h3>
                    <a href="${srv}">${srv}</a>/
                    <a href="${srv}/$metadata">$metadata</a>
                </h3>
                <ul>
                    ${Object.keys (service.entities).map (e =>
                        `\t\t\t\t<li><a href="${srv}/${e}">${e}</a></li>
                    `).join('')}
                </ul>`
            }) .join('')}
        </body>
    </html>
    `
}}


/* eslint no-console:off */
module.exports = app
if (!module.parent)  app.serve (process.argv[2] || 'all')