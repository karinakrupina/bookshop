/**
 * Thrown in case a function is called in wrong context
 * @extends {external:Error}
 * @alias module:errors.UnexpectedFunctionCallError
 */
class UnexpectedFunctionCallError extends Error {
  /**
   * Create an UnexpectedFunctionCallError
   * @param {string} functionName - The name of the incorrect function parameter.
   * @param {string} expectedFunction - The function name that is required before calling the wanted function
   */
  constructor (functionName, expectedFunction) {
    super(
      `Function called in wrong context: ${
        expectedFunction ? `${expectedFunction} expected before ` : ''
      }${functionName}`
    )
    this.name = this.constructor.name
    Error.captureStackTrace(this, this.constructor)
  }
}

module.exports = UnexpectedFunctionCallError
