const _notInjected = () => {
  throw new Error('This method requires `cds` to be injected')
}

const _validateInjection = cds => {
  if (!cds || typeof cds !== 'object') {
    throw new Error('Injected value is not of type `cds`')
  }
}

const injection = {
  cds: {
    linked: _notInjected,
    reflect: _notInjected,
    parse: {
      cql: _notInjected
    },
    load: _notInjected,
    compile: {
      to: {
        sql: _notInjected
      },
      for: {
        odata: _notInjected
      }
    }
  },
  inject (cds) {
    _validateInjection(cds)

    injection.cds = cds
  },
  linked (...args) {
    return injection.cds.linked(...args)
  },
  reflect (...args) {
    return injection.cds.reflect(...args)
  },
  parse: {
    cql (arg) {
      return injection.cds.parse.cql(arg)
    }
  },
  load (...args) {
    return injection.cds.load(...args)
  },
  compile: {
    to: {
      sql: (csn, options) => {
        return injection.cds.compile.to.sql(csn, options)
      }
    },
    for: {
      odata: (csn, options) => {
        return injection.cds.compile.for.odata(csn, options)
      }
    }
  },
  get config () {
    return injection.cds.config || { data: {} }
  },
  get builtin () {
    return injection.cds.builtin || { types: {} }
  },
  get env () {
    return injection.cds.env || { cdsc: {} }
  }
}

module.exports = injection
