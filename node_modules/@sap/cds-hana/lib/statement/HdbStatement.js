const { convertErrorCodeToString } = require('../util')

class HdbStatement {
  /**
   * Create an HdbStatement object.
   *
   * @param {object} statement - Statement object obtained from hdb.
   * @param {string} sql - SQL string to be passed to SqlError
   */
  constructor (statement, sql) {
    this._stmt = statement
    this._sql = sql
  }

  /**
   * Execute prepared statement.
   *
   * Values are provided as an array.
   * In order to insert multiple rows with a single execute
   * values have to be provided as arrays of values composed in an outer array.
   *
   * Method returns a result object.
   * For example, in case of SELECT the result object contains a result-set.
   * In case of INSERT/DELETE the result object contains a number of affected rows.
   * In case of multiple (batch) insert the result object is an array like [1, 1, ..., 1]
   *
   * @example
   * single insert: execute([1, 'a'])
   * multiple insert: execute([[1, 'a'], [2, 'b']])
   *
   * @param {array} values - Values to be set in the prepared SQL statement.
   * @returns {Promise} Promise that resolves with the result object if successful and rejects if not.
   * Result object can be undefined.
   */
  execute (values) {
    return new Promise((resolve, reject) => {
      this._stmt.exec(values, (err, result) => {
        if (err) {
          convertErrorCodeToString(err)
          err.failedQuery = this._sql

          return reject(err)
        }

        if (Array.isArray(result) && result.length !== 0 && !result.some(isNaN)) {
          result = result.reduce((pv, cv) => pv + cv, 0)
        }
        resolve(result)
      })
    })
  }
}

module.exports = HdbStatement
