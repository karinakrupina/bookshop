'use strict';

const HeaderNames = require('@sap/odata-commons').http.HttpHeader.HeaderNames;
const BadRequestError = require('../errors/BadRequestError');
const VersionValidator = require('./VersionValidator');

/**
 * Utility class to validate given headers.
 */
class HeaderValidator {
    /**
     * Creates an instance of HeaderValidator.
     * @param {string} version the OData version
     */
    constructor(version) {
        this._version = version;
    }

    /**
     * Validates the headers.
     * @param {string} headerName - The name of the header to be validated
     * @param {Object} headers headers as object with header:headerValue
     * @throws {Error} If no validator is found, or the given header is invalid according to the validator
     */
    validate(headerName, headers) {
        const name = headerName.toLowerCase();
        switch (name) {
            case HeaderNames.ODATA_VERSION.toLowerCase():
                this._validateVersion(headers[name]);
                break;
            case HeaderNames.ODATA_MAXVERSION.toLowerCase():
                this._validateMaxVersion(headers[name]);
                break;
            default:
                throw new Error('No validator is registered for the header ' + headerName);
        }
    }

    /**
     * Validates the OData version.
     * @param {string} requestedVersion the version in the request
     * @private
     */
    _validateVersion(requestedVersion) {
        const versionValidator = new VersionValidator(this._version);
        if (requestedVersion && !versionValidator.isEqualToSupported(requestedVersion)) {
            throw new BadRequestError("The OData-Version '" + requestedVersion + "' is not a supported version. "
                + "The only supported version is '" + this._version + "'.");
        }
    }

    /**
     * Validates the ODataMaxVersion.
     * @param {string} requestedMaxVersion the version in the request
     * @private
     */
    _validateMaxVersion(requestedMaxVersion) {
        const versionValidator = new VersionValidator(this._version);
        if (requestedMaxVersion && !versionValidator.isMaxEqOrGtSupported(requestedMaxVersion)) {
            throw new BadRequestError("The OData-Version '" + requestedMaxVersion + "' is not a supported version. "
                + "The only supported version is '" + this._version + "'.");
        }
    }
}

module.exports = HeaderValidator;
