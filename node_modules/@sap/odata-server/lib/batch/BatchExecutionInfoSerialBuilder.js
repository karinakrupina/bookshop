'use strict';

const AtomicityGroupProcessorCommand = require('../invocation/batch/AtomicityGroupProcessorCommand');
const BatchedRequestExecutionCommand = require('../invocation/batch/BatchedRequestProcessorCommand');

/**
 * Builds the command list which is used to process the requests from the batch request.
 * "Serial" means that all requests in the batch request are executed in order without
 * parallel execution of independent requests.
 *
 * This class works in combination with the BatchExecutionInfoSerialProcessor class which executes the
 * command list created by this class.
 *
 * Both BatchExecutionInfoSerialBuilder and BatchExecutionInfoSerialProcessor can be exchanged in the
 * service definition to allow a customized batch execution.
 */
class BatchExecutionInfoSerialBuilder {

    /**
     * Loops trough the collected requests and creates the command list
     * @param {BatchContext} batchContext Batch context
     * @returns {Command[]} command list
     */
    static build(batchContext) {
        /**
         * @type {AtomicityGroupProcessorCommand[]|BatchedRequestProcessorCommand[]}
         */
        const commandList = [];
        /**
         * @type {BatchedRequestProcessorCommand[]}
         */
        let atomicityGroupList = [];

        const requestsInBatch = batchContext.getRequestList();

        let lastUsedAtomicityGroupId = null;

        // open batch
        for (const request of requestsInBatch) {
            const atomicityGroupId = request.getAtomicityGroupId();

            if (atomicityGroupId) {
                // Check if atomicity group has been changed
                if (atomicityGroupId !== lastUsedAtomicityGroupId) {

                    if (lastUsedAtomicityGroupId) {
                        // close old one
                        commandList.push(
                            new AtomicityGroupProcessorCommand(batchContext, atomicityGroupList,
                                lastUsedAtomicityGroupId)
                        );
                        atomicityGroupList = [];
                    }
                }
                atomicityGroupList.push(new BatchedRequestExecutionCommand(batchContext, request));
            } else {
                if (lastUsedAtomicityGroupId) {
                    // close old one
                    commandList.push(
                        new AtomicityGroupProcessorCommand(batchContext, atomicityGroupList, lastUsedAtomicityGroupId));
                    atomicityGroupList = [];
                    lastUsedAtomicityGroupId = null;
                }
                commandList.push(new BatchedRequestExecutionCommand(batchContext, request));
            }


            lastUsedAtomicityGroupId = atomicityGroupId;
        }

        // close atomicity group
        if (lastUsedAtomicityGroupId) {
            commandList.push(
                new AtomicityGroupProcessorCommand(batchContext, atomicityGroupList, lastUsedAtomicityGroupId)
            );
        }

        return commandList;
    }
}

module.exports = BatchExecutionInfoSerialBuilder;
