'use strict';

/**
 * Class containing method to validate batch requests
 *
 * @hideconstructor
 */
class BatchExitHandler {
}

/**
 * @callback BatchExitHandler~next
 */

/**
 * The BatchStartHandler can be registered for batch processing, it is called before the processing of batched requests starts.
 * - If the application returns or throws an error to the {@see BatchExitHandler~next} callback no batched request is executed and
 * the BatchEndHandler {@see BatchEndHandler} is called with that error.
 *
 * @callback BatchStartHandler
 * @memberOf BatchExitHandler
 * @param {Object} context
 * @param {string} context.applicationData Application data, can be set on the OdataRequest via setApplicationData(...), e.g. within the request event of the $batch request
 * @param {BatchExitHandler~next} done - Callback to be called after transaction start
 */
BatchExitHandler.BATCH_START = 'batch-start';

/**
 * The BatchEndHandler can be registered for batch processing, it is called after the batched requests are executed.
 * - If the application returns or throws an error to the {@see BatchExitHandler~next} callback this error triggers the
 * error handling of the incoming http request.
 *
 * @callback BatchEndHandler
 * @memberOf BatchExitHandler
 * @param {Error} error Error object which is set in case of runtime errors and errors in previous exit handlers, but
 * not case of failed batched requests (whose error message is catched and written to a batched response)
 * @param {Object} context
 * @param {string} context.applicationData Application data, can be set on the OdataRequest via setApplicationData(...), e.g. within the request event
 * @param {BatchErrorInfo[]} context.failedRequests List of batched requests which returned with an error status code
 * @param {BatchExitHandler~next} done - Callback to be called after transaction start
 */
BatchExitHandler.BATCH_END = 'batch-end';

/**
 * The AtomicityGroupStartHandler can be registered for batch processing, it is called before the first request of an
 * atomicity group /change set is processed
 * - If the application returns or throws an error to the {@see BatchExitHandler~next} callback the atomicity group is marked as
 * not executed and no further batched requests are executed. This error is also forwarded to the {@see AtomicityGroupEndHandler} handler.
 *
 * @callback AtomicityGroupStartHandler
 * @memberOf BatchExitHandler
 * @param {Object} context
 * @param {string} context.applicationData Application data, can be set on the OdataRequest via setApplicationData(...), e.g. within the request event
 * @param {string} context.id Atomicity group id
 * @param {BatchExitHandler~next} done - Callback to be called after transaction start
 */
BatchExitHandler.ATOMICITY_GROUP_START = 'atomicity-group-start';

/**
 * The AtomicityGroupEndHandler can be registered for batch processing it is called after all batched requests of an
 * atomicity group / change set are processed
 * - If the application returns or throws an error to the BatchExitHandler~next callback the atomicity group is marked as
 * not executed and no further batched requests are executed.
 * - AtomicityGroupEndHandler is called in both cases error and non error
 *
 * @callback AtomicityGroupEndHandler
 * @memberOf BatchExitHandler
 * @param {Error} error Error object which is set in case of runtime errors and errors in previous exit handlers, but
 * not case of failed batched requests (whose error message is catched and written to a batched response)
 * @param {Object} context
 * @param {string} context.applicationData Application data, can be set on the OdataRequest via setApplicationData(...), e.g. within the request event
 * @param {Error[]} context.failedRequests List of batch requests which failed and whose error message is written to a batched response. This list
 *     may be used to implement some kind of transaction handling
 * @param {string} context.id Atomicity group id
 * @param {BatchExitHandler~next} done - Callback to be called after transaction start
 */
BatchExitHandler.ATOMICITY_GROUP_END = 'atomicity-group-end';

module.exports = BatchExitHandler;
