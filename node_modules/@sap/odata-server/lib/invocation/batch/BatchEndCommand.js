'use strict';

const BatchEvents = require('../../batch/BatchExitHandler');
const Command = require('../Command');

/**
 * Invokes the listener registered to be called if a batch request has been processed
 * @extends Command
 */
class BatchEndCommand extends Command {
    /**
     * Constructor
     * @param {BatchContext} batchContext Batch context
     */
    constructor(batchContext) {
        super();

        /**
         * Batch context
         * @type {BatchContext}
         * @private
         */
        this._batchContext = batchContext;

        /**
         * The registered listener function of the application
         * @type {Function}
         * @private
         */
        this._listener = batchContext.getService().getComponentManager().getComponent(BatchEvents.BATCH_END);
    }

    /**
     * Executes the listener. The listener MUST execute the provided next function.
     * @param {Command~Next} next the provided next function
     * @param {Error} internalError Error object, set if there was an runtime error or an application error in previous exit handlers
     */
    execute(next, internalError) {
        if (!this._listener) {
            next(internalError);
        } else {

            try {
                const request = this._batchContext.getRequest();
                const context = {
                    applicationData: request.getApplicationData(),
                    failedRequests: this._batchContext.getFailedRequestsOfBatchRequest()
                };

                this._listener(internalError, context,
                    applicationError => next(applicationError || internalError));
            } catch (applicationException) {
                next(applicationException);
            }
        }
    }
}

module.exports = BatchEndCommand;
