'use strict';

const BatchExitHandler = require('../../batch/BatchExitHandler');
const Command = require('../Command');

/**
 * Invokes the listener registered to be called if a batch request has been processed
 * @extends Command
 */
class BatchStartCommand extends Command {
    /**
     * Constructor
     * @param {BatchContext} batchContext Batch context
     */
    constructor(batchContext) {
        super(null);

        /**
         * Batch context
         * @type {BatchContext}
         * @private
         */
        this._batchContext = batchContext;
        const service = batchContext.getService();

        /**
         * The registered listener function of the application
         * @type {Function}
         * @private
         */
        this._listener = service.getComponentManager().getComponent(BatchExitHandler.BATCH_START);
    }


    /**
     * Executes the listener. The listener must execute the provided next function.
     * @param {Command~Next} next the next function
     */
    execute(next) {
        if (!this._listener) {
            next();
        } else {
            try {
                const request = this._batchContext.getRequest();
                const context = { applicationData: request.getApplicationData() };

                this._listener(context, applicationError => {
                    if (applicationError) {
                        // wrap the application error and give the error to the BATCH_END handler
                        // next(new BatchAppError(applicationError));
                        next(applicationError);
                    } else {
                        next();
                    }
                });
            } catch (applicationException) {
                // wrap the application error and give the error to the BATCH_END handler
                // const error = new BatchAppError(applicationException);
                // next(error);
                next(applicationException);
            }
        }
    }
}

module.exports = BatchStartCommand;
