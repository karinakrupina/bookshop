'use strict';

const SerializationError = require('../errors/SerializationError');

/**
 * Request object wrapper to carry original response information.
 * @extends OdataResponse
 */
class OdataResponseInBatch {
    /**
     * Creates an instance of OdataResponse.
     * @param {Object} inResponse  A response object
     * @param {Function} streamOptions - The writable stream options.
     * @param {string} responseId - Response ID
     */
    constructor(inResponse, streamOptions, responseId) {
        this._inResponse = inResponse;

        if (!responseId) {
            throw new SerializationError('Invalid response ID');
        }
        this._responseId = responseId;
    }

    /**
     * Returns the original incoming node response message.
     * @returns {Object} the original incoming response
     */
    getIncomingResponse() {
        return this._inResponse;
    }

    /**
     * Return the response ID.
     * @returns {string} the response ID
     */
    getOdataResponseId() {
        return this._responseId;
    }

    /**
     * Returns the atomicity group to which this request belongs to.
     * @returns {string} the atomicity group ID
     */
    getAtomicityGroupId() {
        return this._atomicityGroupId;
    }

    /**
     * Set the atomicity group to which this request belongs to.
     * @param {string} atomicityGroup atomicity group
     * @returns {OdataRequestInBatch} this instance
     * @package
     */
    setAtomicityGroupId(atomicityGroup) {
        this._atomicityGroupId = atomicityGroup;
        return this;
    }

    /**
     * Return the current status code of this response.
     * @returns {number} The current status code.
     */
    getStatusCode() {
        return this._inResponse.statusCode;
    }

    /**
     * Returns the status message of the http response.
     * @returns {string} The status message
     */
    getStatusMessage() {
        return this._inResponse.statusMessage;
    }
}

module.exports = OdataResponseInBatch;
