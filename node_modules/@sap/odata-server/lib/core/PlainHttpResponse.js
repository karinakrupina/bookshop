'use strict';

const Writable = require('stream').Writable;
const HttpStatusCode = require('@sap/odata-commons').http.HttpStatusCode;
const HttpStatusCodes = HttpStatusCode.StatusCodes;
const HttpStatusCodesText = HttpStatusCode.Texts;

const CRLF = '\r\n';
const HTTP_VERSION = 'HTTP/1.1';

/**
 * Simulates an http.ServerResponse;
 * used when parsing a multipart/mixed request into sub requests.
 *
 * @extends Writable
 * @hideconstructor
 */
class PlainHttpResponse extends Writable {
    /**
     * Constructor
     */
    constructor() {
        super();
        this.statusCode = HttpStatusCodes.OK;
        this._buffers = [];
        this._header = {};

        // as in nodejs
        this.headersSent = false;
        this._odataRequestId = null;
    }

    /**
     * Return  OData request ID,
     * @returns {?string} the request ID
     */
    getOdataRequestId() {
        return this._odataRequestId;
    }

    /**
     * Set OData request ID.
     * @param {string} id OData request ID
     * @returns {PlainHttpResponse} this instance
     */
    setOdataRequestId(id) {
        this._odataRequestId = id;
        return this;
    }

    /**
     * Writable implementation.
     * @param {Buffer|string} chunk the chunk to write
     * @param {string} encoding its encoding
     * @param {Function} callback the callback
     * @private
     */
    _write(chunk, encoding, callback) {
        this._buffers.push(chunk);

        callback();
    }


    /**
     * Returns the value of the requested header.
     * @param {string} name Header name
     * @returns {string} Header value
     */
    getHeader(name) {
        return this._header[name.toLowerCase()];
    }

    /**
     * Returns headers object.
     * @returns {Object} the headers
     */
    getHeaders() {
        return this._header;
    }

    /**
     * Sets a header.
     * @param {string} name the name of the header
     * @param {string} value the value of the header
     * @returns {PlainHttpResponse} this instance
     * @package
     */
    setHeader(name, value) {
        this._header[name.toLowerCase()] = value;
        return this;
    }

    /**
     * Returns the HTTP version.
     * @returns {string} the HTTP version
     */
    getHttpVersion() {
        return HTTP_VERSION;
    }

    /**
     * Writes the response into an stream.
     * @param {Stream} stream the stream
     * @package
     */
    writeTo(stream) {
        // write status line
        const statusCode = this.statusCode || HttpStatusCodes.OK;
        const statusCodeText = HttpStatusCodesText[statusCode];

        stream.write(this.getHttpVersion() + ' ' + statusCode + ' ' + statusCodeText + CRLF);

        // write headers
        for (let name of Object.keys(this._header)) {
            if (name.toLowerCase() !== 'content-length') {
                stream.write(name + ': ' + this._header[name] + CRLF);
            }
        }

        // stream.write('content-length:  ' + l.toString() + CRLF); // TODO check if content-length is a must
        stream.write(CRLF); // header body separator

        // write payload
        for (const buf of this._buffers) {
            stream.write(buf);
        }
    }
}

module.exports = PlainHttpResponse;
