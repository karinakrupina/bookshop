'use strict';

const commons = require('@sap/odata-commons');
const validateThat = commons.validator.ParameterValidator.validateThat;
const JsonFormat = commons.format.JsonFormat;
const JsonAnnotations = JsonFormat.Annotations;
const MetaProperties = JsonFormat.MetaProperties;
const SerializationError = require('../errors/SerializationError');

/**
 * JSON serializer for service documents
 */
class ServiceJsonSerializer {
    /**
     * @param {EdmProvider} edmProvider the EDM
     */
    constructor(edmProvider) {
        validateThat('edmProvider', edmProvider).truthy().instanceOf(Object);
        this._edmProvider = edmProvider;

        this._outputJson = {};
    }

    /**
     * Serializes the service document based on the available EDM.
     * The output includes context URL, entity sets, function imports, and singletons.
     * @param {Object} data the data
     * @returns {string} The serialized service document
     */
    serialize(data) {
        try {
            this._outputJson[JsonAnnotations.CONTEXT] = '$metadata';

            if (data[MetaProperties.ETAG] !== null && data[MetaProperties.ETAG] !== undefined) {
                this._outputJson[JsonAnnotations.METADATA_ETAG] = 'W/"' + data[MetaProperties.ETAG] + '"';
            }

            let entityContainer = this._edmProvider.getEntityContainer();
            if (entityContainer) {
                this._outputJson.value = [];

                this._writeElements(entityContainer.getEntitySets(), 'EntitySet');
                this._writeElements(entityContainer.getFunctionImports(), 'FunctionImport');
                this._writeElements(entityContainer.getSingletons(), 'Singleton');
            }

            return JSON.stringify(this._outputJson);

        } catch (e) {
            throw new SerializationError('An error occurred while serializing the service document', e);
        }
    }

    /**
     * Serializes the given EDM elements in objects with the properties
     * name, url, kind (if provided), and title (if provided).
     *
     * @param {EdmEntitySet[]|EdmFunctionImport[]|EdmSingleton[]} elements - Array of the given EDM elements
     * @param {string} kind - 'EntitySet' | 'FunctionImport' | 'Singleton'
     * @private
     */
    _writeElements(elements, kind) {
        elements
            .filter(elem => { // filter in/out elements that set includeInServiceDocument
                switch (kind) {
                    case 'EntitySet': // default is to be serialized
                        return elem.isIncludeInServiceDocument() !== false;

                    case 'FunctionImport': // default is not to be serialized
                        return elem.isIncludeInServiceDocument() === true;

                    case 'Singleton':
                        return true;
                    default:
                        return false;
                }
            })
            .forEach(elem => {
                let elemSerialized = {
                    name: elem.getName(),
                    url: elem.getName()
                };
                if (kind && kind !== 'EntitySet') {
                    elemSerialized.kind = kind;
                }

                this._outputJson.value.push(elemSerialized);
            });

    }
}

module.exports = ServiceJsonSerializer;
