#!/usr/bin/env node
const c = require('ansi-colors');
const minimist = require('minimist');

const Constants = require('../lib/constants');
const i18n = require('../lib/i18n/i18n');
const generator = require('../lib/index');


if (!process.env[Constants.ENV_KEY_CDS_IDE]) {
    console.warn();
    console.warn(c.yellow('*******************************'));
    console.warn(c.yellow('**** SAP Internal Use Only ****'));
    console.warn(c.yellow('*******************************'));
    console.warn();
}


const getCommand = (cmdName) => {
    return generator[cmdName];
}

const getHelp = (cmdName) => {
    const cmd = getCommand(cmdName);
    if (cmd) {
        return cmd.help;
    }

    return null;
}

const uniqueMerge = (whiteList, ...arrays) => {
    const result = [];

    for (let array of arrays) {
        for (let item of array ) {
            // only add params passed in white list, e.g. via command line
            if (whiteList.includes(item)) {
                item = item.replace(/^--/, '');

                if (!result.includes(item)) {
                    result.push(item);
                }
            }
        }
    }

    return result;
};

const main = async argv => {
    const options = {...argv};

    // remove args from options
    delete options._;


    if (options.version || options.v || argv._[0] === 'version') {
        const packageJson = require('../package.json');
        console.log(packageJson.version);
        return;
    }

    if (!argv._[0]) {
        const helpText = getHelp('init');
        console.log(helpText);
        return;
    }

    if (argv._[0] === 'help') {

        // display default help for empty command and 'help' command
        const cmdName = (argv._[1] && argv._[1] !== 'help' && argv._[1] !== 'version' ? argv._[1] : 'init');
        const helpText = getHelp(cmdName);
        if (helpText) {
            console.log(helpText);
        } else {
            console.error(c.redBright(i18n.t(i18n.command_unknown, { cmd: cmdName })));
        }

        return;
    }

    const cmd = getCommand(argv._[0]);
    if (cmd) {
        try {
            argv._.shift(); // remove add command from args
            await cmd.command.run(argv._, options);
        } catch (err) {
            if (argv.debug) {
                console.error(err);
            } else {
                console.error(c.redBright(
                    i18n.t(i18n.command_error, { message: err.message }))
                );
            }
        }
    } else {
        console.error(c.redBright(i18n.t(i18n.command_unknown, {cmd: argv._[0]})));
    }
}

const options = {
    boolean: uniqueMerge(process.argv, generator.add.flags, generator.init.flags),
    string: uniqueMerge(process.argv, generator.add.options, generator.init.options)
}

const _argv = minimist(process.argv.slice(2), options);
main(_argv);


// /* eslint no-console:0 no-eval: 0 */
