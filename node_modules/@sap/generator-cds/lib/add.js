const path = require('path');

const Constants = require('./constants');
const Command = require('./command');
const AddDbHandler = require('./add_db');
const AddSrvHandler = require('./add_srv');
const FsHelper = require('./helper/fs_helper');
const i18n = require('./i18n/i18n');



const CONFIG = Object.freeze({
    dbTechnology: {
        default: '',
        regex: new RegExp(Constants.REGEX_DB_TECHNOLOGY)
    },
    insecure: {
        default: false
    },
    javaPackage: {
        default: 'sample'
    },
    moduleType: {
        default: '',
        regex: new RegExp(Constants.REGEX_MODULE_TYPE)
    },
    odataVersion: {
        default: 'odatav2'
    },
    skipInstall: {
        default: false
    },
    skipSampleModels: {
        default: false,
        deprecated: true
    },
    srvMemory: {
        default: '512M',
        regex: /^[1-9]\d*\w?$/
    },
    srvTechnology: {
        default: 'nodejs',
        regex: new RegExp(Constants.REGEX_SRV_TECHNOLOGY)
    }
});



class AddCommand extends Command {
    constructor() {
        super(CONFIG);
    }

    get options() {
        return this._options;
    }

    async run(args, options, cdsEnv) {

        if (!args[0]) {
            throw new Error(i18n.add_unknown_empty_type);
        }

        if (args[0] !== 'module') {
            throw new Error(i18n.t(i18n.add_unknown_type, { type: args[0] || i18n.add_unknown_empty_type }));
        }

        args.shift();
        await super.run(args, options, cdsEnv);
        this._options.projectName = path.basename(path.dirname(path.resolve(this._options.destination)));

        await this.execute(this._options.destination, this._options.moduleType, this._options);

        await this.finalize();

        this.reportProgress();
        this.reportProgress(i18n.add_finished_successfully);
    }

    async execute(dest, moduleType, options) {

        await this.checkPrecondition(dest, moduleType, options.force);

        switch (moduleType) {
            case Constants.MODULE_TYPE_DB:
                this.handler = new AddDbHandler(this);
                break;

            case Constants.MODULE_TYPE_SRV:
                this.handler = new AddSrvHandler(this);
                break;

            case Constants.MODULE_TYPE_APP:
                this.handler = new AddAppHandler(this);
                break;

            default:
                throw new Error(`Unknow type ${moduleType}`);
        }

        await this.handler.stageCopyTemplates(dest, options);
        await this.handler.stagePostProcessing(dest, options);
    }

    async checkPrecondition(dest, moduleType, force) {
        if (!dest) {
            throw new Error(i18n.add_module_name_missing);
        }

        if (!moduleType) {
            throw new Error(i18n.add_missing_module_type);
        }

        if (!Constants.MODULE_TYPES.includes(moduleType)) {
            throw new Error(i18n.t(i18n.add_unknown_module_type, {moduleType}));
        }

        if (!force) {
            if (await FsHelper.pathExists(dest)) {
                const folderContent = await FsHelper.readdir(dest);
                if (folderContent.length > 0) {
                    throw new Error(i18n.t(i18n.command_target_exists, { dest }));
                }
            }
        }
    }
}

module.exports = AddCommand;
