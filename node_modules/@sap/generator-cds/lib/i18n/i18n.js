const Constants = require('../constants');


module.exports = {




//
//
//
// command.js
//

    command_invalid_option: `[Error] Invalid option {{optionName}} with value {{optionValue}}`,

    command_invalid_option_value: `[Error] Invalid value {{optionValue}} for option {{optionName}}`,

    command_target_exists: `Target directory {{dest}} already exists and has content, use --force to overwrite`,

    command_unknown: `[ERROR] Unknown command '{{cmd}}'. See 'cds-gen help' for all available commands`,

    command_summary: `Summary`,

    command_created: `Created: {{file}}`,

    command_error: `[ERROR] {{message}}`,

//
//
//
// help.js
//

    help_error: `Didn't find a help topic for {{topic}}.`,

    help_help: `
# USAGE

    *cds-gen* <command> [<args>]


# COMMANDS

    *init*               ...Creates a new project.
    *help*               Shows usage for cds and individual commands.
    *version*            Prints the version of cds.

    *cds-gen help* <command> gives more help about each.
    *cds-gen* without any arguments shows this help.


# EXAMPLES

    *cds-gen* init project

`,


//
//
//
// add.js
//

    add_finished_successfully: `Module creation was successful.`,

    add_copying_templates: `Copying templates for type {{moduleType}} to {{dest}} ...`,

    add_module_name_missing: `Module name missing`,

    add_unknown_type: `Type {{type}} is unknown and can not be added`,

    add_unknown_module_type: `Module type {{moduleType}} is unknown and can not be added`,

    add_unknown_empty_type: `You must specify what to add, currently only 'module' is supported`,

    add_missing_module_type: `Module type missing, use --module-type to specify.`,

//
//
//
// init.js
//

    init_help: `
# SYNOPSIS

    *cds-gen init* [<dir>] [<options>]

    Creates a new project in the given directory.


# OPTIONS

    *--debug*

        Print additional debug onfo to console, also enabled via process.env.DEBUG

    *--db-technology*

        Specify the database technology, currently only *hana* is supported.

    *--force*

        Overwrite existing files.

    *--insecure*

        Skip creation of uaa entries.

    *--java-package [<java package id>]*

        The package ID for the java srv module (only needed if srv-technology is java).
        Default is: *sample*.

    *--modules [<modules>]*

        A comma-separated list of the modules to be created.
        Valid modules are *srv* and *db*.
        Default is: *{empty}*.

    *--mta*

        Also create an mta.yaml file.

    *--odata-version*

        Generate java service based on given odata version.
        Default is: odatav2

    *--quiet*

        No console output.

    *--skip-install*

        Don't run npm install after project creation

    *--skip-sample-models*

        Do not create sample cds files.

    *--srv-memory*

        Memeory allocated by defaut for service. Syntax is number followed by unit chararcter,
        e.g. 512M, 1024K

    *--srv-technology [<technology>]*

        The technology to use for the srv module (if specified / selected).
        Valid values are *java* and *nodejs*.
        Default is: *nodejs*

    *--verbose*

        More output on console.

# EXAMPLES

    *cds-gen* init project
    *cds-gen* init project --modules srv,db
    *cds-gen* init project --modules srv --srv-technology java

`,

    init_creating_new_project: `Creating new project in directory {{destination}}.`,

    init_creating_new_project_local: `Creating new project in current directory.`,

    init_updating_dependencies: `Updating npm dependencies in {{packageJsonPath}} ...`,

    init_creating_mta_file: `Creating mta file {{yamlPath}} ...`,

    init_creating_java_srv: `Creating java srv module...`,

    init_postprocessing_java_srv: `Post processing java srv module...`,

    init_running_npm_install: `Running npm install...`,

    init_finished_successfully: `Project creation was successful.`,

    init_srv_java_and_db_hana: `[WARN] When using service technology "${Constants.SRV_TECHNOLOGY_JAVA}" `
        + `also use database technology "${Constants.DB_TECHNOLOGY_HANA}", `
        + `e.g. --db-technology ${Constants.DB_TECHNOLOGY_HANA}`,

//
//
//
// version.js
//

    version_help: `
# SYNOPSIS

    *cds-gen version*
    *cds-gen -v*

    Prints the version of CDS-GEN.
`,




addModule_help: `
# SYNOPSIS

    *cds-gen add module*

    Adds a new module.

# OPTIONS

    *--debug*

        Print additional debug onfo to console, also enabled via process.env.DEBUG

    *--db-technology*

        Specify the database technology, currently only *hana* is supported.

    *--force*

        Overwrite existing files.

    *--insecure*

        Skip creation of uaa entries.

    *--java-package [<java package id>]*

        The package ID for the java srv module (only needed if srv-technology is java).
        Default is: *sample*.

    *--module-type*

        The module type to be created, valid tpyes are *srv* and *db*.

    *--odata-version*

        Generate java service based on given odata version.
        Default is: odatav2

    *--quiet*

        No console output.

    *--skip-install*

        Don't run npm install after project creation

    *--skip-sample-models*

        Do not create sample cds files.

    *--srv-memory*

        Memeory allocated by defaut for service. Syntax is number followed by unit chararcter,
        e.g. 512M, 1024K

    *--srv-technology [<technology>]*

        The technology to use for the srv module (if specified / selected).
        Valid values are *java* and *nodejs*.
        Default is: *nodejs*

    *--verbose*

        More output on console.
`,



    t: _t
};


const TEMPLATE_REGEX = /\{\{([^\{\}]+)\}\}/gi;
function _t(text, context) {
    let result = text;
    if (context) {
        let match = TEMPLATE_REGEX.exec(text);
        while (match != null) {
            const value = context[match[1].trim()];
            if (value !== undefined) {
                result = result.replace(match[0], value);
            }
            match = TEMPLATE_REGEX.exec(text);
        }
    }
    return result;
}
