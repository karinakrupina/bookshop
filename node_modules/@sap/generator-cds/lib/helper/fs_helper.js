const fs = require('fs-extra');
const os = require('os');
const path = require('path');

const TEMPLATES_ROOT = path.join(__dirname, '..', 'templates');
const TEMPLATE_REGEX = /<%=\s*(\w+)\s*%>/g;

const GLOBAL_KEY = Symbol.for('@sap/generator-cds');

const TEMPLATE_EXTENSION = 'tpl';
const SAMPLE_EXTENSION = 'cds';

const UTF_8 = 'utf-8';

global[GLOBAL_KEY] = {
    createdFiles: new Set()
};

class FsHelper {

    static getTemplate(templatePath) {
        return path.join(TEMPLATES_ROOT, templatePath);
    }


    static _addCreatedFile(filepath) {
        global[GLOBAL_KEY].createdFiles.add(filepath);
    }


    static writeFile(filepath, content, skipFileLog = false) {
        if (!skipFileLog) {
            this._addCreatedFile(filepath);
        }
        return fs.outputFile(filepath, content, UTF_8);
    }


    static writeJSON(filepath, object, options = {}, skipFileLog = false) {
        if (!skipFileLog) {
            this._addCreatedFile(filepath);
        }
        return fs.outputJSON(filepath, object, options);
    }


    static readFile(src) {
        return fs.readFile(src, UTF_8);
    }


    static async readJSON(src) {
        const fileContent = await this.readFile(src, UTF_8);
        return JSON.parse(fileContent);
    }


    static copy(source, destination, options = {}) {

        const filter = options.filter;

        options.filter = async (src, dest) => {
            let result = true;
            if (filter) {
                result = filter(src, dest);
            }

            if (result) {
                const stats = await fs.stat(src);
                if (stats.isFile()) {
                    this._addCreatedFile(dest);
                }
            }

            return result;
        };

        return fs.copy(source, destination, options);
    }


    static _isTemplateFile(filename) {
        return filename.split('.').pop() === TEMPLATE_EXTENSION;
    }


    static _filterFiles(src, destination, templateFiles) {
        const filename = path.basename(src);

        const isTemplateFile = this._isTemplateFile(filename);

        if (isTemplateFile) {
            templateFiles.push({ src: src, destination: destination });
        }

        return !isTemplateFile;
    }


    static async copyTemplate(template, destinationPath, templateValues) {
        const templatePath = this.getTemplate(template);
        const templateFiles = [];
        const fileFilter = (src, destination) => (this._filterFiles(src, destination, templateFiles));

        await this.copy(templatePath, destinationPath, { filter: fileFilter });
        await this._processTemplates(templateFiles, templateValues);
    }


    static _processTemplates(templateFiles, templateValues) {
        const promises = templateFiles.map(async (templateFile) => {
            await this._processTemplate(templateFile.src, templateFile.destination, templateValues);
        });

        // ...wait for all promises which the async map function returns
        return Promise.all(promises);
    }


    static async _processTemplate(src, destination, templateValues) {

        let content = await this.readFile(src);
        content = this._replaceTemplatePlaceholder(content, templateValues);
        const destinationPath = destination.replace(/.tpl$/, '');

        await this.writeFile(destinationPath, content);
    }


    static _replaceTemplatePlaceholder(content, templateValues) {

        let match = TEMPLATE_REGEX.exec(content);

        while(match !== null) {
            const value = templateValues[match[1]] || '';
            content = content.replace(match[0], value);

            match = TEMPLATE_REGEX.exec(content);
        }

        return content;
    }


    static createTempFolder(preFix) {
        return fs.mkdtemp(path.join(os.tmpdir(), preFix));
    }


    static remove(src) {
        return fs.remove(src);
    }


    static pathExists(path) {
        return fs.pathExists(path);
    }


    static readdir(path) {
        return fs.readdir(path);
    }


    static getCreatedFiles() {
        return Array.from(global[GLOBAL_KEY].createdFiles.keys());
    }
}

module.exports = FsHelper;
