const path = require('path');

const YAML = require('yaml');

const Constants = require('../constants');
const FsHelper = require('./fs_helper');


class MTAHelper {

    static async update(dest, mtaPath, moduleType, options) {

        const yamlStr = await FsHelper.readFile(mtaPath);
        const mta = YAML.parse(yamlStr);

        switch (moduleType) {
            case Constants.MODULE_TYPE_APP:
                this._addAppModule(dest, mta, options.projectName, options.insecure, options.force);
                break;

            case Constants.MODULE_TYPE_DB:
                if (options.dbTechnology === Constants.DB_TECHNOLOGY_HANA) {
                    this._addDbModule(dest, mta, options.projectName);
                    this._addHdiContainerResource(mta, options.projectName, options.force);
                }
                break;

            case Constants.MODULE_TYPE_SRV: {
                this._addSrvModule(dest, mta, options.projectName, options.srvTechnology, options.srvMemory, options.insecure, options.force);
                break;
            }

            default:
                // this is a programming error, so no translatable text
                throw new Error(`Module type '${moduleType}' not found`);

        }

        await FsHelper.writeFile(mtaPath, YAML.stringify(mta));
    }

    static _findInArray(array, elementName) {
        if (array) {
            return array.findIndex(element => {
                return element.name === elementName;
            });
        }

        return -1;
    }

    static _filterArray(array, elementName) {
        if (array) {
            const index = this._findInArray(array, elementName);
            if (index > -1) {
                array.splice(index, 1);
            }

            return array;

        } else {
            return [];
        }
    }

    static _addSrvModule(dest, mta, projectName, srvTechnology, srvMemory, insecure, force) {
        const moduleName = `${projectName}-srv`;

        mta.modules = this._filterArray(mta.modules, moduleName);

        const srvModule = {
            name: moduleName,
            type: srvTechnology,
            path: `${path.basename(dest)}`,
            parameters: {
                memory: srvMemory,
                'disk-quota': '256M'
            },
            provides: [{
                name: 'srv_api',
                properties: {
                    url: '\$\{default-url\}'
                }
            }]
        };

        if (this._findHdiContainerType(mta)) {
            srvModule.requires = srvModule.requires || [];
            this._addHdiRequires(srvModule.requires, projectName + '-hdi-container', srvTechnology === Constants.SRV_TECHNOLOGY_JAVA);
        }

        if (!insecure) {
            this._addUaaResource(mta, projectName, force);
            srvModule.requires = srvModule.requires || [];
            srvModule.requires.push({
                name: projectName + '-uaa'
            });
        }

        mta.modules.push(srvModule);
    }

    static _addHdiRequires(mtaRequires, name, addJBPConfig) {
        let requiresEntry = mtaRequires.find(entry => {
            return entry.name === name;
        });

        if (!requiresEntry) {
            requiresEntry = {};
            mtaRequires.push(requiresEntry);
        }

        requiresEntry.name = name;
        if (addJBPConfig) {
            requiresEntry.properties = {
                "JBP_CONFIG_RESOURCE_CONFIGURATION": "[tomcat/webapps/ROOT/META-INF/context.xml: {\"service_name_for_DefaultDB\" : \"~{hdi-container-name}\"}]"
           }
        }
    }

    static _findHdiContainerType(mta) {
        if (mta && mta.resources) {
            let hdiContainerName;
            const index = mta.resources.findIndex(resource => {
                hdiContainerName = resource.name;
                return resource.type === Constants.HDI_CONTAINER_TYPE;
            });

            return (index > -1 ? hdiContainerName : null);
        }

        return null;
    }

    static _addAppModule(dest, mta, projectName, insecure, force) {
        const moduleName = `${projectName}-app`;

        mta.modules = this._filterArray(mta.modules, moduleName);

        const appModule = {
            name: moduleName,
            type: 'html5',
            path: `${path.basename(dest)}`,
            parameters: {
                'memory': '256M',
                'disk-quota': '256M'
            },
            requires: [
                {
                    name: 'srv_api',
                    group: 'destinations',
                    properties: {
                        forwardAuthToken: true,
                        name: 'srv_api',
                        url: '~{url}'
                    }
                }
            ]
        };

        if (!insecure) {
            this._addUaaResource(mta, projectName, force);
            appModule.requires.push({
                name: projectName + '-uaa'
            });
        }

        mta.modules.push(appModule);
    }


    static _addDbModule(dest, mta, projectName) {
        const moduleName = `${projectName}-db`;

        mta.modules = this._filterArray(mta.modules, moduleName);

        const dbModule = {
            name: moduleName,
            type: 'hdb',
            path: `${path.basename(dest)}`,
            parameters: {
                memory: '256M',
                'disk-quota': '256M'
            },
            requires: [
                { name: projectName + '-hdi-container' }
            ]
        };

        const javaSrvModule = this._findJavaSrv(mta);
        if (javaSrvModule) {
            javaSrvModule.requires = javaSrvModule.requires || [];

            this._addHdiRequires(javaSrvModule.requires, projectName + '-hdi-container', true);
        }

        mta.modules.push(dbModule);
    }

    static _findJavaSrv(mta) {
        if (mta && mta.modules) {
            let javaSrvModule;
            const index = mta.modules.findIndex(mtaModule => {
                javaSrvModule = mtaModule;
                return mtaModule.type === Constants.SRV_TECHNOLOGY_JAVA && mtaModule.path === Constants.DEFAULT_MODULE_FOLDER[Constants.MODULE_TYPE_SRV];
            });

            return (index > -1 ? javaSrvModule : null);
        }

        return null;
    }

    static _addUaaResource(mta, projectName, force) {
        const resourceName = `${projectName}-uaa`;

        if (force) {
            mta.resources = this._filterArray(mta.resources, resourceName);
        } else {
            if (this._findInArray(mta.resources, resourceName) > -1) {
                return;
            }
            mta.resources = mta.resources || [];
        }

        mta.resources.push({
            name: resourceName,
            type: 'com.sap.xs.uaa',
            parameters: {
                'service-plan': 'default',
                config: {
                    xsappname: `${projectName}-\$\{space\}`,
                    'tenant-mode': 'dedicated',
                    scopes: [
                        {
                            name: '$XSAPPNAME.Show',
                            description: 'display'
                        },
                        {
                            name: '$XSAPPNAME.Add',
                            description: 'create'
                        },
                        {
                            name: '$XSAPPNAME.Remove',
                            description: 'delete'
                        }
                    ]
                }
            }
        });
    }


    static _addHdiContainerResource(mta, projectName, force) {
        const resourceName = `${projectName}-hdi-container`;

        if (force) {
            mta.resources = this._filterArray(mta.resources, resourceName);
        } else {
            if (this._findInArray(mta.resources, resourceName) > -1) {
                return;
            }
            mta.resources = mta.resources || [];
        }

        mta.resources.push({
            name: resourceName,
            type: Constants.HDI_CONTAINER_TYPE,
            properties: {
                'hdi-container-name': '\$\{service-name\}'
            }
        });
    }
}

module.exports = MTAHelper;
