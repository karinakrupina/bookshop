const cp = require('child_process');
const os = require('os');


class ExecHelper {

    /**
     * Execute a command and show output in console, if verbose
     *
     * @param {call this command array (command and args)} cmd
     * @param {the working folder} cwd
     * @param {show command's output, default false} verbose
     */
    static spawnCommand(cmdArray, cwd, verbose = false) {
        return new Promise((resolve, reject) => {
            // remove command form array and reduce array by one
            const command = cmdArray.shift();
            const cmdArguments = cmdArray;

            const options = {
                cwd: cwd,
                shell: (os.platform() === 'win32') // for windows only?
            }

            // pipe to host stdio if running in verbose mode,
            // otherwise don't set to use default
            if(verbose) {
                options.stdio = 'inherit';
            }
            const child = cp.spawn(command, cmdArguments, options);

            child.on('close', (code) => {
                if(code === 0) {
                    resolve();
                } else {
                    reject(new Error(`${command} ${cmdArguments} failed with code ${code}`));
                }
            });

            child.on('error', (err) => {
                reject(err);
            });
        });
    }

    /**
     * Capture outout of comand as promise result.
     *
     * @param {call this command array (command and args) and return output as promise resolve} cmd
     * @param {the working folder} cwd
     */
    static executeCommand(cmdArray, cwd) {
        return new Promise((resolve, reject) => {
            const cmd = cmdArray.shift();
            cp.execFile(cmd, cmdArray, {
                cwd: cwd,
                shell: (os.platform() === 'win32')
            }, (err, stdout, stderr) => {
                if (err) {
                    // reject only if err is filled since warnings will be logged
                    // into stderr
                    reject(err);
                } else {
                    // resolve if no err ... stderr might contain warnings
                    resolve(stdout);
                }
            });
        });
    }
}

module.exports = ExecHelper;
