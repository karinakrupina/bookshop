// Compiler phase "define": transform dictionary of AST-like CSNs into augmented CSN

// AST-like CSN looks as follows:
//   { kind: 'source', env: <dictionary of artifact defs>, namespace: {}, ... }
//
// The property `artifacts` of a source contains the top-level definitions.
// Definitions inside a context are not listed here (as opposed to
// `definitions`, see below), but inside the property `artifacts` of that context.

// The define phase (function 'initSources' below) enriches a dictionary of
// (file names to) AST-like CSNs and restructure them a little bit, the result
// is called "augmented CSN":
//   { sources: <dictionary of ASTs>, definitions: <dictionary of artifact defs> }
//
// The property `sources` is the input argument (dictionary of source ASTs).
//
// The property `definitions` is set by this compiler phase.  It contains the
// definitions of all main artifacts (i.e. not elements) from all sources, the
// key is the absolute name of that artifact.  These definitions are the same
// objects as the definitions accessible via `sources` and `artifacts` of the
// corresponding source/context.
//
// Because different sources could define artifacts with the same absolute
// name, this compiler phase also put a property `messages` to the resulting
// model, which is a vector of messages for the redefinitions.  (Using the same
// name for different definitions in one source is already recognized during
// parsing.)
//
// You get the compact "official" CSN format by applying the function exported
// by "../json/compactor.js" to the augmented CSN.

// Example 'file.cds':
//   namespace A;
//   context B {
//     type C { elem: String(4); }
//   }
// Check the augmented CSN by compiling it with
//   cdsv --raw-output file.cds
//
// ┌───────────────┐           ┌───────────────────────────────────────────┐
// │    sources    │           │                 definitions               │
// └──┬────────────┘           └──┬────────────────────────────┬───────────┘
//    │                           │                            │
//    │ ['file.cds']              │ ['A.B']                    │ ['A.B.C']
//    ↓                           ↓                            ↓
// ┌───────────────┐  _parent  ┌────────────────┐  _parent  ┌──────────────┐
// │ kind:'source' │←──────────┤ kind:'context' │←──────────┤ kind: 'type' │
// │ artifacts: ───┼──────────→│ artifacts: ────┼──────────→│ ...          │
// └───────────────┘   ['B']   └────────────────┘   ['C']   └──────────────┘
//
// The _parent properties are not shown in the JSON - they are used for name
// resolution, see file './resolver.js'.

// An artifact definition looks as follows (example: context "A.B" above):
//   {
//     kind: 'context',
//     name: { id: 'B', absolute: 'A.B', location: { <for the id "B"> } },
//     artifacts: <for contexts, a dictionary of artifacts defined within>,
//     location: { <of the complete artifact definition> } },
//     _parent: <the parent artifact, here the source 'file.cds'>
//   }
// The properties `name.absolute`, `name.component` and `_parent` are set
// during this compiler phase.

// The definition of an entity or a structured type would contain an `elements`
// property instead of an `artifacts` property.

// An element definition looks as follows (example: "elem" above):
//   {
//     kind: 'element',
//     name: { id: 'elem', component: 'elem', location: { <for the id "elem"> } }
//     type: { path: [ { id: 'String', location: ... } ] },
//     typeArguments: [ { number: '4', location: ... } ]
//     location: { <of the complete element definition> } },
//     _parent: <the parent artifact, here the type "A.B.C">
//   }
// References are resolved in the "resolve" phase of the compiler, see
// './resolver.js'.  We then get the properties `type.absolute` and `length`.

'use strict';

const { getMessageFunction, searchName, weakLocation } = require('../base/messages');
const { queryOps, setProp, forEachGeneric, forEachInOrder, forEachMember }
      = require('../base/model');
var { addToDict, addToDictWithIndexNo, clearDict, dictLocation, pushToDict }
    = require('../base/dictionaries');
const { dictKinds, kindProperties, fns, setLink, linkToOrigin, setMemberParent, storeExtension, combinedLocation } = require('./shared');
const { compareLayer, layer } = require('./moduleLayers');
var initBuiltins = require('./builtins');

// Export function of this file.  Transform argument `sources` = dictionary of
// AST-like CSNs into augmented CSN.  If a vector is provided for argument
// `messages` (usually the combined messages from `parse` for all sources), do
// not throw an exception in case of an error, but push the corresponding error
// object to that vector.  If at least one AST does not exist due to a parse
// error, set property `lintMode` of `options` to `true`.  Then, the resolver
// does not report errors for using directives pointing to non-existing
// artifacts.
function define( model, options = model.options || {} ) {
  // Get simplified "resolve" functionality and the message function:
  const message = getMessageFunction( model );
  const {
    resolveUncheckedPath,
    resolvePath,
    defineAnnotations,
  } = fns( model );
  model.definitions = Object.create(null);
  setProp( model, '_entities', [] ); // for entities with includes

  var extensionsDict = Object.create(null);
  var lateExtensionsDict = Object.create(null); // for generated artifacts
  initBuiltins( model );
  for (let name in model.sources) {
    initSource( model.sources[name] );
  }
  applyExtensions();
  forEachGeneric( model, 'definitions', processArtifact );
  lateExtensions();
  // Set _service link (sorted to set it on parent first).  Could be set
  // directly, but beware a namespace becoming a service later.
  Object.keys( model.definitions ).sort().forEach( setAncestorsAndService );
  forEachGeneric( model, 'definitions', postProcessArtifact );
  return model;

  function checkRedefinitions( obj, name, prop, i ) {
    forEachMember( obj, checkRedefinitions );
    if (i == null)
      return;
    message( 'duplicate-definition', obj.name.location, obj,
             { name, '#': (obj.kind === 'namespace') ? 'namespace' : dictKinds[prop] },
             'Error', {
               std:       'Duplicate definition of $(NAME)',
               absolute:  'Duplicate definition of artifact $(NAME)',
               namespace: 'Other definition blocks $(NAME) for namespace name',
               element:   'Duplicate definition of element $(NAME)',
               enum:      'Duplicate definition of enum $(NAME)',
               key:       'Duplicate definition of key $(NAME)',
               action:    'Duplicate definition of action or function $(NAME)',
               param:     'Duplicate definition of parameter $(NAME)',
             });
  }

  function initSource( src ) {
    // handle sub model from CSN parser
    if (!src.kind)
      src.kind = 'source';
    if (src.definitions) {
      forEachGeneric( src, 'definitions', function( art, name ) {
        if (!art.kind)            // TODO: should be done by augmentor
          art.kind = 'type';
        let dot = name.lastIndexOf('.');
        if (dot > name.indexOf('::')) // there is a dot (after '::')
          addAsContextArtifact( art, name.substring(dot+1), name.substring(0,dot), src );
        setProp( art, '_block', src );
        addToDefinitions( art, name );
        initMembers( art, art, src );
      });
      initArtifacts( src, null, src, true, null, 'definitions' );
    }
    // handle sub model from CDL parser, handle `extensions` in sub models
    // (from all parsers) by `initArtifacts) argument collectExts = true
    initUsings( src, src.usings );
    let decl = src.namespace;
    let prefix = (decl && decl.dcPath) ? pathName(decl.dcPath) + '::' : '';
    let namespace = decl && decl.path && namespaceContext( decl.path, prefix, undefined, decl.location );
    if (!namespace) {
      // also handles `extensions` property
      initArtifacts( src, namespace, src, true, prefix );
    }
    else {
      setProp( decl, '_artifact', namespace );
      // create using for own namespace:
      let last = decl.path[ decl.path.length - 1 ];
      let builtin = model.$builtins[ last.id ];
      if (builtin && !builtin.internal) {
        message( 'ref-shadowed-builtin', src.namespace.location, null, // no home artifact
                 { id: last.id, art: src.namespace, code: `using ${builtin.name.absolute};` },
                 'Warning', '$(ID) now refers to $(ART) - consider $(CODE)' );
      }
      let block = {
        kind: 'source', filename: src.filename,
        name: { id: last.id, location: last.location }, // for --raw-output
        artifacts: Object.create(null)
      };
      let absolute = namespace.name.absolute;
      block.artifacts[ last.id ] = { // assert( last.id === namespace.name.id )
        kind: 'using',               // TODO: or store namespace directly?
        //implicit: true,
        name: { id: last.id, absolute, location: last.location, calculated: true, $inferred: 'as' },
        extern: decl,
        location: decl.location
      };
      setProp( src, '_block', block );
      initArtifacts( src, namespace, src, true );
    }
  }

  function namespaceContext( path, prefix = '', parent, declLocation ) {
    let absolute;
    if (path.broken)
      return parent;
    for (let item of path) {
      let id = item.id;
      absolute = (absolute) ? absolute + '.' + id : prefix + id;
      let context = model.definitions[absolute];
      if (!context || context instanceof Array ||
          !kindProperties[ context.kind ].artifacts) {
        let location = combinedLocation( path[0], item );
        context = {
          kind: 'namespace',
          name: { id, location, absolute },
          blocks: [],
          artifacts: Object.create(null),
          location: declLocation || location
        };
        if (parent) {
          if (!parent.artifacts)
            parent.artifacts = Object.create(null);
          addToDict( parent.artifacts, id, context );
        }
        addToDefinitions( context, absolute );
        setProp( context, '_parent', parent || null );
      }
      setProp( item, '_artifact', context );
      parent = context;
    }
    return parent;
  }

  // Set property `name.absolute` or artifact `art` to `absoluteName`.  Also
  // store `art` in the `definition` property of the model and complain if
  // another artifact has already been defined with the same absolute name.
  // TODO: do our own check for reserved names in compiler !!!
  function addToDefinitions( art, absolute = art.name.absolute, prefix, parent ) {
    let context = reuse();
    //console.log(context?'Reuse':'Def',art.name,prefix ,parent&&parent.name)
    if (context)
      return context;
    if (prefix != null && art.name.path && art.name.path.length > 1) {
      let path = [...art.name.path];
      let id = path.pop();
      art.name.id = id.id;
      context = namespaceContext( path, prefix, parent );
      addToDict( context.artifacts, id.id, art );
      setProp( art, '_parent', context );
    }
    else if (parent && art.name.path) {
      addToDict( parent.artifacts, art.name.path[0].id, art );
      setProp( art, '_parent', parent );
    }
    else if (!('_parent' in art)) {
      setProp( art, '_parent', null );
    }
    if (absolute === 'cds') {
      // TODO: move all 'cds' prefix checks into compiler
      message( null, art.name.location, parent,
               `The namespace "cds" is reserved for CDS builtins` );
    }
    else
      addToDict( model.definitions, absolute, art );
    return art;

    function reuse( ) {
      if (!kindProperties[ art.kind ].artifacts)  // no context, service or namespace
        return undefined;
      let found = model.definitions[absolute];
      if (!found || found instanceof Array)
        return undefined;
      if (art.kind === 'namespace' && kindProperties[ found.kind ].artifacts)
        // we are namespace, `found` is context, service or namespace
        return found;
      if (found.kind !== 'namespace')
        return undefined;
      found.kind = art.kind;    // use non-namespace kind
      found.name = art.name;    // use name (its location!) of definition
      return found;
    }
  }

  function addAsContextArtifact( art, id, contextName, src ) {
    let context = src.definitions[contextName];
    if (!context) {
      let location = art.name.location;
      let colons = contextName.indexOf('::');
      colons = (colons < 0) ? 0 : colons + 2;
      let path = contextName.substring(colons).split('.').map( id => ({ id, location }) );
      context = namespaceContext( path, contextName.substring(0,colons), undefined, location );
    }
    if (context instanceof Array || !context.kind) // no proper construct
      return;
    if (!kindProperties[ context.kind ].artifacts) // no context or service
      return;
    if (!context.artifacts)
      context.artifacts = Object.create(null);
    addToDict( context.artifacts, id, art );
    setProp( art, '_parent', context );
  }

  // Initialize the USING declarations in source `src`.  Add the corresponding
  // names to the top-level search environment of the source, and set the
  // absolute name referred by the USING declaration.
  function initUsings( src, usings ) {
    if (!usings)
      return;
    if (!src.artifacts)
      src.artifacts = Object.create(null);
    for (let def of usings) {
      if (def.usings) {
        initUsings( src, def.usings );
        continue;
      }
      let ue = def.extern;
      if (!def.name) {
        def.name = Object.assign( { calculated: true, $inferred: 'as' },
                                  ue.path[ ue.path.length - 1] );
      }
      if (!(ue.path.broken || ue.dcPath && ue.dcPath.broken)) {
        def.name.absolute = (ue.dcPath)
          ? pathName(ue.dcPath) + '::' + pathName(ue.path)
          : pathName(ue.path);
      }
      addToDict( src.artifacts, def.name.id, def, function( name, loc, art ) {
        if (art.kind === 'using') // repeated defs would be shown repeatedly otherwise
          message( 'duplicate-using', loc, null, { name }, 'Error',
                   'Duplicate definition of top-level name $(NAME)' );
      } );
    }
  }

  // Set property `_parent` for all sub artifact in `parent` to `parent` and do
  // so recursively for all sub artifacts.  Also set the property
  // `name.absolute` of all those artifacts with the help of argument `prefix`
  // (which is basically the absolute name of `parent` plus a dot).  If a sub
  // artifact has elements, call function `initElements`.
  function initArtifacts( construct, parent, block, collectExts,
                          prefix = parent.name.absolute + '.', defProp ) {
    // if (parent && !checkDefinitions( construct, parent, 'artifacts' ))
    //   return;
    // TODO: the checkDefinitions must be propably checked by the parsers
    //let dottedNames = [];
    //let namespaces = Object.create(null);
    for (let name of Object.keys( construct.artifacts || {} )) {
       // no `forEachGeneric` as setName might add artifacts, e.g. "A" for "A.B"
      let def = construct.artifacts[name];
      if (def instanceof Array) {
        for (let art of def)
          setName( art, name );
      }
      else {
        setName( def, name );
      }
    }
    // defineAnnotations() and collectArtifactExtensions() in init() requires
    // names of other artifacts in context
    // var namespaceParent = { artifacts: Object.create(null) };
    forEachGeneric( construct, defProp || 'artifacts', init );
    if (collectExts)
      collectArtifactExtensions( construct, block );
    return;

    function setName( art, pathName ) {
      if (art.kind === 'using')
        return;
      setProp( art, '_block', block );
      art.name.absolute = prefix + pathName;
      let path = art.name.path;
      if (!path || path.length <= 1)
        return;
      let root = path[0];
      let id = root.id;
      let namespace = namespaceContext( [root], prefix, parent );
      if (construct.artifacts[id])
        // TODO: complain if USING uses that name
        return;                 // TODO: do we need to set root._artifact?
      let name = { absolute: prefix + id, id, location: root.location };
      setProp( name, '_artifact', namespace );
      construct.artifacts[id] = { kind: 'block', name, pathPrefix: true };
    }

    function init( art ) {
      if (art.pathPrefix || art.kind === 'using') // real.path as name, or using proxies
        return;
      if (kindProperties[ art.kind ].artifacts) { // context or service
        if (defProp) {                            // from JSON parser
          defineAnnotations( art, art, block );
          art.blocks = [null];  // TODO: assert that there are no blocks before
          if (!art.artifacts)   // if art had been no namespace before
            art.artifacts = Object.create(null); // TODO: test with A.B.C then A.B in definitions
          serviceIncludes( art );
          return;
        }
        let env = art;
        art = addToDefinitions( shallowContext(env), undefined, prefix, parent );
        env.kind = 'block';
        env.name.query = art.blocks.length;
        setProp( env.name, '_artifact', art );
        setProp( env, '_parent', art );
        art.blocks.push( env );
        defineAnnotations( env, art, block ); // requires name.absolute of siblings!
        initArtifacts( env, art, env, collectExts );
        if ( env.includes ) {
          art.includes = env.includes;
          delete env.includes;
        }
        if ( env.abstract ) {
          art.abstract = env.abstract;
          delete env.abstract;
        }
        // initMembers(art, art, block); // if we define "service-bound" actions
        serviceIncludes( art );
      }
      else if (art.query) {     // view or projection
        if (!defProp)
          addToDefinitions( art, undefined, prefix, parent );
        defineAnnotations( art, art, block );
        if (art.source)         // from old-style CSN - TODO: error!?
          return;
        initDollarSelf( art ); // to allow extend projection with auto-mixin assoc, see #924
        initParams( art );
        art.$from = [];         // for sequence of resolve steps
        art.$queries = [];
        art.queries = [];
        setProp( art, '_leadingQuery', initQueryExpression( art, art.query ) );
        setProp( art._leadingQuery, '_$next', art );
        // resolve parameters and actions:
        initMembers( art, art, block ); // before setting art.elements! 
        // TODO: Also allow extension if without union (even then, but later
        // check checks whether union can be used)?
      }
      else {
        if (!defProp)
          addToDefinitions( art, undefined, prefix, parent );
        if (art.dbType && !options.hanaFlavor)
          message( null, art.dbType.location, art, `TABLE TYPE is not supported yet` );
        defineAnnotations( art, art, block );
        initMembers( art, art, block );
        let absolute = art.name.absolute;
        if (art.includes && !(absolute in extensionsDict))
          extensionsDict[absolute] = []; // structure with includes must be "extended"
        initDollarSelf( art );
      }
    }

    function initDollarSelf( art ) {
      let selfname = (options.hanaFlavor) ? art.name.id : '$self';
      // TODO: users setMemberParent() ?
      let self = {
        name: { id: selfname, alias: selfname, absolute: art.name.absolute },
        kind: '$tableAlias', self: true,
        type: {},
        location: art.location };
      setProp( self, '_parent', art );
      setProp( self, '_main', art ); // used on main artifact
      setProp( self.type, '_artifact', art );
      art.$tableAliases = Object.create(null);
      art.$tableAliases[selfname] = self;
      setProp( art, '_$next', model.$magicVariables );
    }

    function initParams( art ) {
      // TODO: users setMemberParent() ?
      let parameters = {
        name: { id: '$parameters', param: '$parameters', absolute: art.name.absolute },
        kind: '$parameters',
        location: art.location };
      setProp( parameters, '_parent', art );
      setProp( parameters, '_main', art );
      // Search for :const after :param.  If there will be a posibility in the
      // future that we can extend <query>.columns, we must be sure to use
      // _block of that new column after :param (or just allow $parameters there).
      setProp( parameters, '_block', art._block );
      if (art.params) {
        parameters.elements = art.params;
        parameters.$tableAliases = art.params; // TODO: find better name - $lexical?
      }
      art.$tableAliases.$parameters = parameters;
    }
  }

  function initSubQuery( query ) {
    query.queries = [];
    if (query.on)
      initExprForQuery( query.on, query );
    // TODO: MIXIN with name = ...subquery (not yet supported anyway)
    for (let elem of query.columns || []) {
      if (elem && elem.value) {
        setProp( elem, '_block', query._block );
        defineAnnotations( elem, elem, query._block );
        initExprForQuery( elem.value, query ); // adds to query.queries
      }
    }
    if (query.where)
      initExprForQuery( query.where, query );
    if (query.having)
      initExprForQuery( query.having, query );
    initMembers( query, query, query._block );
  }

  function initExprForQuery( expr, query ) {
    if (expr instanceof Array)
      expr.forEach( e => initExprForQuery( e, query ) );
    else if (!expr || !expr.op)
      return;
    else if (expr.op && queryOps[ expr.op.val ]) {
      initQueryExpression( query, expr ); // adds to query.queries
    }
    else if (expr.args)
      expr.args.forEach( e => initExprForQuery( e, query ) );
  }

  // for an example, see view V006 in test/fromHanaCDS/positive/Queries_Subquery_ok
  function initQueryExpression( art, query, parents = [] ) {
    while (query instanceof Array) // query / join args in parentheses
      query = query[0];
    if (!query)                 // parse error
      return query;

    if (query.path) {           // path in FROM - this query is a table ref
      if (!query.path.length || query.path.broken)
        // parse error (e.g. final ',' in FROM), projection on <eof>
        return query;
      if (!query.name) {
        let last = query.path[ query.path.length-1 ];
        let dot  = last.id.lastIndexOf('.');
        let id   = (dot < 0) ? last.id : last.id.substring( dot+1 );
        // TODO: if we have too much time, we can calculate the real location with '.'
        query.name = { calculated: true, $inferred: 'as', id, location: last.location };
      }
      addAlias( { type: query }, query );
      if (art.kind !== 'query')
        art.$from.push( query ); // store tabref if outside "real" subquery
    }
    else if (query.join) {
      if (query.on) {
        addQuery();
        // TODO: use first tabalias name on the right side of the join (if much
        // easier: last of left side) as 'param' in name of this "query" (do
        // not use that for user msg, only for --raw-output)
        initSubQuery( query );
        parents = [...parents, query];
      }
      for (let tab of query.args)
        initQueryExpression( art, tab, parents );
    }
    else if (query.op && query.op.val === 'query') { // select
      addQuery();
      query._main.$queries.push( query ); // TODO: set number with it
      if (parents.length)
        addAlias( {}, query );
      for (let tab of query.from)
        initQueryExpression( art, tab, [query] );
      if (query.mixin)
        addMixin();
      if (!query.$tableAliases.$projection) {
        // TODO: use setMemberParent() ?
        query.$tableAliases.$projection = {
          name: { alias: '$projection', query: query.name.query, absolute: art.name.absolute },
          kind: '$tableAlias', self: true,
          location: query.location
        };
        setProp( query.$tableAliases.$projection, '_parent', query );
        setProp( query.$tableAliases.$projection, '_main', query._main );
        setProp( query.$tableAliases.$projection, '_finalType', query );
      }
      if (!query.$tableAliases.$self) { // same as $projection
        query.$tableAliases.$self = {
          name: { alias: '$self', query: query.name.query, absolute: art.name.absolute },
          kind: '$tableAlias', self: true,
          location: query.location
        };
        setProp( query.$tableAliases.$self, '_parent', query );
        setProp( query.$tableAliases.$self, '_main', query._main );
        setProp( query.$tableAliases.$self, '_finalType', query );
      }
      initSubQuery( query );    // after from / mixin
    }
    else if (query.args) {      // UNION, INTERSECT, ..., sub query
      let leading = initQueryExpression( art, query.args[0], [] );
      for (let q of query.args.slice(1))
        initQueryExpression( art, q, [] );
      setProp( query, '_leadingQuery', leading );
      if (query.orderBy) {
        if (leading.$orderBy)
          leading.$orderBy.push( ...query.orderBy );
        else
          leading.$orderBy = [ ...query.orderBy ];
        query.orderBy.forEach( ob => setProp( ob, '_$queryNode', query ) ); // TODO: we can again remove that
      }
      // ORDER BY to be evaluated in leading query (LIMIT is literal)
      if (parents.length)
        addAlias( query, leading );
    }
    // else: with parse error (`select from <EOF>`)
    return query._leadingQuery || query;

    function signalDuplicate( name, loc ) {
      message( 'duplicate-definition', loc, query, { name, '#': '$tableAlias' },
               'Error',
               { '$tableAlias': 'Duplicate definition of table alias or mixin $(NAME)' } );
    }

    function addAlias( alias, subquery ) {
      if (!alias.type)
        setProp( alias, '_finalType', subquery );
      if (!query.name || !query.name.id) {
        message( 'query-req-alias', query.location, query, {}, // TODO: not subquery.location ?
                 'Error', 'Table alias is required for this subquery' );
        return;
      }
      if (alias !== query) {
        alias.name = { id: query.name.id, location: query.name.location };
        alias.location = query.location;
      }
      alias.kind = '$tableAlias';
      let parent = parents[0];
      setMemberParent( alias, alias.name.id, parent );
      if (!parent._firstAliasInFrom)
        setProp( parent, '_firstAliasInFrom', alias );
      setProp( subquery, '_tableAlias', alias );
      for (let p of parents) {
        //console.log('ADD:', query.name.id, parents.length, p)
        addToDict( p.$tableAliases, alias.name.id, alias, p === parent && signalDuplicate );
      }
    }

    function addMixin() {
      // TODO: re-check if mixins have already duplicates
      for (let name in query.mixin) {
        let mixin = query.mixin[name];
        if (!(mixin instanceof Array)) {
          setMemberParent( mixin, name, query );
          // TODO: without old CSN: delete 'alias & $mixin', keep element and set kind='mixin'
          mixin.name.alias = mixin.name.element;
          delete mixin.name.element;
          mixin.name.$mixin = true;
          setProp( mixin, '_block', art._block );
          // TODO: do some initMembers() ?  If people had annotation
          // assignments on the mixin... (also for future mixin definitions
          // with generated values)
          addToDict( query.$tableAliases, name, query.mixin[name], signalDuplicate );
        }
      }
    }

    function addQuery() {
      setProp( query, '_$next', art );
      setProp( query, '_block', art._block );
      query.kind = 'query';
      if (!query.name)
        query.name = { location: query.location };
      setMemberParent( query, art.queries.length, art );
      art.queries.push( query );
      query.$tableAliases = Object.create( null ); // table aliases and mixin definitions
    }
  }

  function shallowContext( ext ) {
    let art = {
      kind: ext.kind,
      name: Object.assign( {}, ext.name ),
      blocks: [],
      artifacts: Object.create(null),
      location: ext.location
    };
    setProp( art, '_block', ext._block ); // keep _block for service includes
    // This means that we cannot "merge" two contexts in the future - nobody complained
    return art;
  }

  // Set property `_parent` for all elements in `parent` to `parent` and do so
  // recursively for all subelements.  Also set the property
  // `name.component` of the element with the help of argument `prefix`
  // (which is basically the component name of the `parent` element plus a dot).
  function initMembers( construct, parent, block ) {
    let isQueryExtension = kindProperties[ construct.kind ].isExtension &&
                           (parent._main||parent).query;
    let obj = construct.returns || construct; // why the extra `returns` for actions?
    if (construct.returns)
      setProp( obj, '_outer', construct ); // TODO: remove this `returns` property

    if (obj.items) {
      obj = obj.items;
      setProp( obj, '_outer', construct );
    }
    if (obj !== parent && obj.elements && parent.enum) {
      for (let n in obj.elements) {
        let e =  obj.elements[n];
        if (e.kind === 'element')
          e.kind = 'enum';
        delete e.indexNo;
      }
      // obj = Object.assign( { enum: obj.elements}, obj );
      // delete obj.elements;      // No extra syntax for EXTEND enum
      forEachGeneric( { enum: obj.elements }, 'enum', init );
    }
    else {
      if (checkDefinitions( construct, parent, 'elements', obj.elements || false ))
        forEachInOrder( obj, 'elements', init );
      if (checkDefinitions( construct, parent, 'enum', obj.enum || false ))
        forEachGeneric( obj, 'enum', init );
    }
    if (obj.foreignKeys)  // cannot be extended or annotated - TODO: check anyway?
      forEachInOrder( obj, 'foreignKeys', init );
    if (checkDefinitions( construct, parent, 'actions' ))
      forEachGeneric( construct, 'actions', init );
    if (checkDefinitions( construct, parent, 'params' ))
      forEachInOrder( construct, 'params', init );
    return;

    function init ( elem, name, prop ) {
      if (!elem.name) {
        let ref = elem.targetElement || elem.kind === 'element' && elem.value;
        if (ref && ref.path) {
          elem.name = Object.assign( { calculated: true, $inferred: 'as' },
                                     ref.path[ ref.path.length-1 ] );
        }
        else {                  // if JSON parser misses to set name
          elem.name = { id: name, location: elem.location };
        }
      }
      // if (!kindProperties[ elem.kind ]) console.log(elem.kind,elem.name)
      if (kindProperties[ elem.kind ].isExtension) {
        storeExtension( elem, name, prop, parent, block );
      }
      else if (isQueryExtension && elem.kind === 'element') {
        message( 'extend-query', elem.location, construct, // TODO: searchName ?
                 { art: parent._main||parent },
                 'Error', 'Query entity $(ART) can only be extended with actions' );
      }
      else {
        setProp( elem, '_block', block );
        setMemberParent( elem, name, parent, construct !== parent && prop );
        defineAnnotations( elem, elem, block );
        initMembers( elem, elem, block );
      }
    }
  }

  function checkDefinitions( construct, parent, prop, dict = construct[prop] ) {
    // To have been checked by parsers:
    // - artifacts (CDL-only anyway) only inside [extend] context|service
    if (!dict)
      return false;
    let feature = kindProperties[ parent.kind ][prop];
    if (feature &&
        (feature === true || construct.kind !== 'extend' || feature( prop, parent )))
      return true;
    let location = dictLocation( dict );
    if (prop === 'actions') {
      message( 'unexpected-actions', location, {}, construct, 'Error',
               'Actions and functions only exist top-level and for entities' );
    }
    else if (parent.kind === 'action' || parent.kind === 'function') {
      message( 'extend-action', construct.location, construct, {}, 'Error',
               'Actions and functions cannot be extended, only annotated' );
    }
    else if (prop === 'params') {
      if (!feature)
        message( 'unexpected-params', location, construct, {}, 'Error',
                 'Parameters only exist for entities, actions or functions' );
      else
        message( 'extend-with-params', location, construct, {}, 'Error', // remark: we could allow this
                 'Extending artifacts with parameters is not supported' );
    }
    else if (feature) {         // allowed in principle, but not with extend
      message( 'extend-type', location, construct, {}, 'Error',
               'Only structures or enum types can be extended with elements/enums' );
    }
    else if (prop === 'elements') {
      message( 'unexpected-elements', location, construct, {}, 'Error',
               'Elements only exist in entities, types or typed constructs' );
    }
    else { // if (prop === 'enum') {
      message( 'unexpected-enum', location, construct, {}, 'Error',
               'Enum symbols can only be defined for types or typed constructs' );
    }
    return construct === parent;
  }

  // Set projection ancestors, and _service link for artifact with absolute name 'name':
  //  - not set: internal artifact
  //  - null: not within service
  //  - false: within abstract service
  //  - service: the artifact of the embedding service
  // This function must be called ordered: parent first
  function setAncestorsAndService( name ) {
    let art = model.definitions[ name ];
    if (!('_parent' in art))
      return;                   // nothing to do for builtins and redefinitions
    if (art.$from && !('_ancestors' in art)) {
      setProjectionAncestors( art );
    }
    let parent = art._parent;
    let service = (parent && parent.kind !== 'service') ? parent._service : parent;
    setProp( art, '_service', service && !service.abstract && service );
    if (service == null)        // do not return on false (= in abstract service)
      return;
    // reconstruct service (in parent) as the value is false for abstract service
    while (parent.kind !== 'service')
      parent = parent._parent;
    if (art.kind === 'service')
      message( 'service-nested-service', art.name.location, art, { art: parent },
               ['Error'], 'A service cannot be nested within a service $(ART)' );
    else if (art.kind === 'context')
      message( 'service-nested-context', art.name.location, art, { art: parent },
               ['Error'], 'A context cannot be nested within a service $(ART)' );
  }

  function setProjectionAncestors( art ) {
    // Must be run after processLocalizedData() as we could have a projection
    // on a generated entity.
    let chain = [];
    while (art && !('_ancestors' in art) && 
           art.$from && art.$from.length === 1 &&
           art.query.op && art.query.op.val === 'query') {
      chain.push( art );
      setProp( art, '_ancestors', null ); // avoid infloop with cyclic from
      let name = resolveUncheckedPath( art.$from[0], 'include', art );
      // TODO: do not set _ancestors if params change
      art = name && projectionAncestor( model.definitions[ name ], art.params );
    }
    let ancestors = art && (art._ancestors || []);
    for (let a of chain.reverse()) {
      ancestors = (ancestors ? [...ancestors, art] : []);
      setProp( a, '_ancestors', ancestors );
      art = a;
    }
  }

  function projectionAncestor( source, params ) {
    if (!source)
      return source;
    if (!params)                // proj has no params => ok if source has no params
      return !source.params && source;
    let sourceParams = source.params || Object.create(null);
    for (let n in sourceParams) {
      if (!(n in params))       // source param is not projection param
        return null;            // -> cannot be used as implicit redirection target
    }
    for (let n in params) {
      let pp = params[n];
      let sp = sourceParams[n];
      if (sp) {
        if (sp.default && !pp.default)
          return null;          // param is not optional anymore
        let pt = pp.type && resolveUncheckedPath( pp.type, 'type', pp );
        let st = sp.type && resolveUncheckedPath( sp.type, 'type', sp );
        if ((pt || null) !== (st || null))
          return null;          // params have different type
      }
      else if (!pp.default)
        return null;        // non-optional param in projection, but not source
    }
    return source;
  }

  function postProcessArtifact( art ) {
    if (!art._ancestors || art.kind === 'type')
      return;
    let service = art._service;
    if (!service)
      return;
    let sname = service.name.absolute;
    art._ancestors.forEach( expose );
    return;

    function expose( ancestor ) {
      if (ancestor._service === service)
        return;
      let desc = ancestor._descendants ||
                 setLink( ancestor, Object.create(null), '_descendants' );
      if (!desc[ sname ])
        desc[ sname ] = [art];
      else
        desc[ sname ].push( art );
    }
  }

  // Collect all artifact extensions
  function collectArtifactExtensions( construct, block ) {
    for (let ext of construct.extensions || []) {
      setProp( ext, '_block', block );
      // complain about non-existent path base, but do not check complete path:
      // normal ref in outer extend, relative ref inside EXTEND CONTEXT
      let name = resolveUncheckedPath( ext.name, ext.kind, ext );
      // TODO: somehow provide expectedKind as filter?
      if (name) {
        pushToDict( extensionsDict, name, ext );
        // an extend with main artifact extension is a block
        collectArtifactExtensions( ext, ext );
      }
    }
  }

  function lateExtensions() {
    for (let name in lateExtensionsDict) {
      let art = model.definitions[name];
      let exts = lateExtensionsDict[name];
      if (art) {                // created texts entity
        extendArtifact( exts, art, 'noExtend' );
      }
      else if (!options.lintMode) {
        // If not lint-mode, complain about unused extensions, i.e. those
        // which do not point to a valid artifact
        for (let ext of exts) {
          delete ext.name.path[0]._artifact;      // get message for root
          resolvePath( ext.name, ext.kind, ext ); // should issue error/info
          if (ext.kind === 'annotate')
            delete ext.name._artifact; // make it be considered by extendArtifact()
        }
        // create "super" ANNOTATE containing all non-applied ones
        let first = exts[0];
        let location = first.name.location;
        art = {
          kind: 'annotate',
          name: { path: [ { id: name, location } ], absolute: name, location },
          location: first.location
        };
        if (model.extensions)
          model.extensions.push(art);
        else
          model.extensions = [art];
        extendArtifact( exts, art ); // also sets _artifact link in extensions
      }
    }
  }

  // phase 1: context extends, 2: extends with structure includes, 3: extends
  // without structure includes (in the case of cyclic includes)
  //
  // Before phase 1: all artifact extensions have been collected (even those
  // inside extend context), only "empty" ones from structure includes are still unknown.
  // After phase 1, all main artifacts are known, also "empty" extensions are known.
  function applyExtensions() {
    let phase = 1;
    let extNames = Object.keys( extensionsDict ).sort();
    // Remark: The sort() makes sure that an extend for artifact C.E is applied
    // after the extend for C has been applied (which could have defined C.E).
    // Looping over model.definitions in Phase 1 would miss the `extend
    // context` for a context C.C defined in an `extend context C`.
    while (extNames.length) {
      let length = extNames.length;
      for (let name of extNames) {
        let art = model.definitions[name];
        if (!art) {
          lateExtensionsDict[name] = extensionsDict[name];
          delete extensionsDict[name];
        }
        else if (art instanceof Array) { // cannot extend redefinitions
          delete extensionsDict[name];
        }
        else if (phase === 1
                 ? extendContext( name, art )
                 : extendArtifact( extensionsDict[name], art, phase > 2 )) {
          delete extensionsDict[name];
        }
      }
      extNames = Object.keys( extensionsDict ); // no sort() required anymore
      if (phase === 1)
        phase = 2;
      else if (extNames.length >= length)
        phase = 3;
    }
  }

  function extendContext( name, art ) {
    // (ext.expectedKind == art.kind) already checked by parser (TODO: modulo context/service)
    if (!kindProperties[ art.kind ].artifacts) // no context or service
      return false;

    for (let ext of extensionsDict[name]) {
      setProp( ext.name, '_artifact', art );
      if (ext.artifacts) {    // extend context with artifacts
        ext.name.query = art.blocks.length;
        art.blocks.push( ext ); // extend context is block of context
      }
      checkDefinitions( ext, art, 'elements'); // error for elements etc
      checkDefinitions( ext, art, 'enum');
      checkDefinitions( ext, art, 'actions');
      checkDefinitions( ext, art, 'params');
      defineAnnotations( ext, art, ext._block, ext.kind );
      initArtifacts( ext, art, ext );
    }
    return true;
  }

  function serviceIncludes( art ) {
    // Actually, the whole code doing extensions needs to be reworked with
    // service includes - having an extra sub phase in applyExtensions()?
    if (art.includes) {         // service includes - just resolve them now
      if (!options.tntFlavor)
        message( null, dictLocation( art.includes ), art,
                 'Service includes are not supported yet' );
      for (let ref of art.includes) {
        resolvePath( ref, 'context', art );
      }
    }
    // let absolute = art.name.absolute;
    // if (art.includes && !(absolute in extensionsDict))
    //   extensionsDict[absolute] = []; // structure with includes must be "extended"
  }

  function extendArtifact( extensions, art, noIncludes ) {
    if (!noIncludes && art.includes) {
      for (let ref of art.includes) {
        let template = resolvePath( ref, 'include', art );
        if (template && template.name.absolute in extensionsDict)
          return false;
      }
      model._entities.push( art ); // add structure with includes in dep order
      includeMembers( art, 'elements', forEachInOrder );
      includeMembers( art, 'actions', forEachGeneric );
    }
    extendMembers( extensions, art, noIncludes === 'noExtend' );
    // TODO: complain about element extensions inside projection
    return true;
  }

  function extendMembers( extensions, art, noExtend ) {
    let elemExtensions = [];
    extensions.sort( compareLayer );
    for (let ext of extensions) {
      if (!('_artifact' in ext.name)) { // not already applied
        setProp( ext.name, '_artifact', art );
        if (noExtend && ext.kind === 'extend') {
          message( 'extend-for-generated', ext.name.location, ext, { art },
                   'Error', 'You cannot use EXTEND on the generated $(ART)' );
          continue;
        }
        defineAnnotations( ext, art, ext._block, ext.kind );
        // TODO: do we allow to add elements with array of {...}?  If yes, adapt
        initMembers( ext, art, ext._block ); // might set _extend, _annotate
      }
      for (let name in ext.elements) {
        let elem = ext.elements[ name ];
        if (elem.kind === 'element') {
          elemExtensions.push( elem );
          break;
        }
      }

    }
    if (elemExtensions.length > 1)
      reportUnstableExtensions( elemExtensions );

    ['elements', 'actions'].forEach( function ext(prop) {
      let dict = art._extend && art._extend[prop];
      for (let name in dict) {
        let member = (art[prop] || prop === 'elements' && art.enum)[name];
        if (!member)
          extendNothing( dict[name], prop, name, art );
        else if (!(member instanceof Array))
          extendMembers( dict[name], member );
      }
    });
  }

  function reportUnstableExtensions( extensions ) {
    // Report 'Warning: Unstable element order due to repeated extensions'.
    // Similar to chooseAssignment(), TODO there: also extra intralater message
    // as this is a modeling error
    let lastExt = null;
    let open = [];              // the "highest" layers
    for (let ext of extensions) {
      let extLayer = layer( ext ) || { realname: '', _layerExtends: Object.create(null) };
      if (!open.length) {
        lastExt = ext;
        open = [ extLayer.realname ];
      }
      else if (extLayer.realname === open[ open.length-1 ]) { // in same layer
        if (lastExt) {
          message( 'extend-repeated-intralayer', lastExt.location, lastExt, {}, 'Warning',
                   'Unstable element order due to repeated extensions in same layer' );
          lastExt = null;
        }
        message( 'extend-repeated-intralayer', ext.location, ext, {}, 'Warning',
                 'Unstable element order due to repeated extensions in same layer' );
      }
      else {
        if (lastExt && (open.length > 1 || !extLayer._layerExtends[ open[0] ])) {
          // report for lastExt if that is unrelated to other open exts or current ext
          message( 'extend-unrelated-layer', lastExt.location, lastExt, {}, 'Warning',
                   'Unstable element order due to other extension in unrelated layer' );
        }
        lastExt = ext;
        open = open.filter( name => !extLayer._layerExtends[ name ] );
        open.push( extLayer.realname );
      }
    }
  }

  function extendNothing( extensions, prop, name, art ) {
    for (let ext of extensions) {
      message( 'extend-undefined', ext.name.location, ext,
               { art: searchName( art, name, dictKinds[prop] ) },
               'Error', {
                 std:     'Unknown $(ART) - nothing to extend',
                 element: 'Artifact $(ART) has no element or enum $(MEMBER) - nothing to extend',
                 action:  'Artifact $(ART) has no action $(MEMBER) - nothing to extend',
               } );
    }
  }

  function includeMembers( art, prop, forEach ) {
    // TODO two kind of messages:
    // Error 'More than one include defines element "A"' (at include ref)
    // Warning 'Overwrites definition from include "I" (at elem def)
    let members = art[prop];
    clearDict( art, prop );     // TODO: do not set actions property if there are none
    setProp( art, '_ancestors', [] ); // recursive array of includes
    for (let ref of art.includes) {
      let template = resolvePath( ref, 'include', art );
      if (template) {           // be robust
        if (template._ancestors)
          art._ancestors.push( ...template._ancestors );
        art._ancestors.push( template );
        forEach( template, prop, function( origin, name ) {
          if (members && name in members)
            return;               // TODO: warning for overwritten element
          let elem = linkToOrigin( origin, name, art, prop, weakLocation( ref.location ) );
          elem.$inferred = 'include';
          if (origin.masked)
            elem.masked = Object.assign( { $inferred: 'include' }, origin.masked );
          if (origin.key)
            elem.key = Object.assign( { $inferred: 'include' }, origin.key );
          // TODO: also complain if elem is just defined in art
        });
      }
    }
    // TODO: expand elements having direct elements (if needed)
    if (members) {
      forEach( { [prop]: members }, prop, function( elem, name ) {
        addToDictWithIndexNo( art, prop, name, elem );
      });
    }
  }

  function processArtifact( art, name, prop, i ) {
    checkRedefinitions( art, name, prop, i );
    if (i != null)
      return;
    if (art.kind === 'entity' && art.elements && // check potential entity parse error
        (!art.abstract || !art.abstract.val))
      processLocalizedData( art );
  }

  function processLocalizedData( art ) {
    if (!options.betaMode)
      return;
    let textsName = art.name.absolute + '_txts';
    // If we re-introduce '::', search for '.' after '::'...
    let dot = textsName.lastIndexOf('.') + 1;
    let viewName = textsName.substring( 0, dot ) + 'localized_' + art.name.absolute.substring( dot );
    let localized = localizedData( art, textsName, viewName );
    if (localized) {
      createTextsEntity( art, textsName, localized );
      createLocalizedDataView( art, viewName, localized );
      addTextsAssociations( art, textsName, localized );
    }
  }

  function localizedData( art, textsName, viewName ) {
    let keys = 0;
    let textElems = [];
    let protectedElems = [];

    for (let name in art.elements) {
      let elem = art.elements[name];
      if (elem instanceof Array)
        return false;           // no localized-data unfold with redefined elems
      if (['locale','texts','localized'].includes( name ))
        protectedElems.push( elem );

      if (elem.key && elem.key.val) { // key with localized is wrong - ignore localized
        keys += 1;
        textElems.push( elem );
      }
      else if (hasTruthyProp( elem, 'localized' ))
        textElems.push( elem );
    }
    if (textElems.length <= keys)
      return false;

    if (!keys) {
      message( null, art.name.location, art, {}, 'Warning',
               'No texts entity can be created when no key element exists' );
    }
    for (let elem of protectedElems) {
      message( null, elem.name.location, art, { name: elem.name.id }, 'Warning',
               'No texts entity can be created when element $(NAME) exists' );
    }
    let textsEntity = model.definitions[ textsName ];
    let viewEntity  = model.definitions[ viewName ];
    let names = [];

    if (textsEntity) {
      if (!(textsEntity instanceof Array))
        message( null, textsEntity.name.location, textsEntity, { art }, 'Info',
                 'No texts entity for $(ART) can be created with this definition' );
      names.push( textsName );
    }
    if (viewEntity) {
      if (!(viewEntity instanceof Array))
        message( null, viewEntity.name.location, viewEntity, { art }, 'Info',
                 'No texts entity for $(ART) can be created with this definition' );
      names.push( viewName );
    }
    if (!names.length)
      return !protectedElems.length && keys && textElems;

    message( null, art.name.location, art, { names }, 'Warning', {
      std: 'Names $(NAMES) for localized data entities used by other definitions',
      one: 'Name $(NAMES) for localized data entity used by other definition'
    } );
    return false;
  }

  // TODO: set _parent also for main artifacts!
  function createTextsEntity( base, absolute, textElems ) {
    let elements = Object.create(null);
    let location = base.name.location;
    let art = {
      kind: 'entity',
      name: { path: splitIntoPath( location, absolute ), location },
      location: base.location,
      elements,
      '@cds.autoexpose': { name: augmentPath( location, '@cds.autoexpose' ), location },
      $inferred: 'localized'
    }
    let locale = {
      name: { location, id: 'locale' },
      kind: 'element',
      key: { val: true, location },
      type: augmentPath( location, 'cds.String' ),
      length: { literal: 'number', val: 5, location },
      location
    };
    addToDictWithIndexNo( art, 'elements', 'locale', locale );
    let artifacts = Object.create(null);
    artifacts[ absolute ] = art;
    initArtifacts( { artifacts }, null, model.$internal, false, '' );

    for (let orig of textElems) {
      let elem = linkToOrigin( orig, orig.name.id, art, 'elements' );
      if (orig.key && orig.key.val)
        elem.key = { val: true, $inferred: 'localized', location };
      else {                    // use location of LOCALIZED keyword
        let localized = orig.localized || orig.type || orig.name;
        elem.localized = { val: false, $inferred: 'localized', location: localized.location };
      }
    }
  }

  function createLocalizedDataView( base, absolute, textElems ) {
    let location = base.name.location;
    let columns = [ { location, val: '*' } ];
    let artifacts = Object.create(null);
    let from = augmentPath( location, base.name.absolute );
    from.name = { id: 'L', location };
    artifacts[ absolute ] = {
      kind: 'entity',
      name: { location, path: splitIntoPath( location, absolute ) },
      location: base.location,
      query: { location, op: { val: 'query', location }, from: [ from ], columns },
      $inferred: 'localized'
    };
    for (let orig of textElems) {
      if (!orig.key || !orig.key.val) {
        let location = orig.name.location;
        let id = orig.name.id;
        let value = {           // TODO: special to allow different code in HANA?
          op: { location, val: 'call' },
          func: augmentPath( location, 'coalesce' ),
          args: [
            augmentPath( location, 'L', 'localized', id ),
            augmentPath( location, 'L', id ) ],
          location
        };
        setProp( value, '_artifact', orig );
        let origin = {};
        setProp( origin, '_artifact', orig );
        // TODO: stay automatically silent if "shadowed" source element appears in expression
        columns.push( { name: { id, location }, location: orig.location, value, origin, $replacement: 'silent' } );
      }
    }
    // TODO: support for name.space::Base ?
    initArtifacts( { artifacts }, null, model.$internal, false, '' );
  }

  function addTextsAssociations( art, textsName, textElems ) {
    // texts : Composition of many Books_txts on texts.ID=ID;
    let keys = textElems.filter( e => e.key && e.key.val );
    let location = art.name.location;
    let texts = {
      name: { location, id: 'texts' },
      kind: 'element',
      location,
      $inferred: 'localized',
      type: augmentPath( location, 'cds.Composition' ),
      cardinality: { targetMax: { literal: 'string', val: '*', location }, location },
      target: augmentPath( location, textsName ),
      onCond: augmentEqual( location, 'texts', keys )
    }
    setMemberParent( texts, 'texts', art, 'elements' );
    setProp( texts, '_block', model.$internal );
    // localized : Association to Books_txts on
    //             localized.ID=ID and localized.locale = $user.locale;
    keys.push( ['localized.locale', '$user.locale'] );
    let localized = {
      name: { location, id: 'localized' },
      kind: 'element',
      location,
      $inferred: 'localized',
      type: augmentPath( location, 'cds.Association' ),
      target: augmentPath( location, textsName ),
      onCond: augmentEqual( location, 'localized', keys )
    }
    setMemberParent( localized, 'localized', art, 'elements' );
    setProp( localized, '_block', model.$internal );
  }

  function hasTruthyProp( art, prop ) {
    // Returns whether art directly or indirectly has the property 'prop',
    // following the 'origin' and the 'type' (not involving elements).
    //
    // TODO: we should issue a warning if we get localized via TYPE OF
    let processed = Object.create(null); // avoid infloops with circular refs
    let name = art.name.absolute;        // is ok, since no recursive type possible
    while (art && !processed[name]) {
      if (art[prop])
        return art[prop].val;
      processed[name] = art;
      if (art.origin && art.origin._artifact) {
        art = art.origin._artifact;
        name = art && art.name.absolute;
      }
      else if (art.type && art._block) {      // TODO: not TYPE OF
        name = resolveUncheckedPath( art.type, 'type', art );
        art = name && model.definitions[ name ];
      }
      else
        return false;
    }
    return false;
  }
}

// Return string 'A.B.C' for parsed source `A.B.C` (is vector of ids with
// locations):
function pathName (path) {
  return path.map( id => id.id ).join('.');
}

function splitIntoPath( location, name ) {
  // TODO: is currently needed to add the artifact into parent
  // TODO: make it also work with path = [{id:absolute}]
  let colons = name.indexOf('::');
  let items = (colons < 0) ? name.split('.') : name.substring(colons).split('.');
  return items.map( id => ({ id, location }) );
}

function augmentPath( location, ...args ) {
  return { path: args.map( id => ({ id, location }) ), location };
}

function augmentEqual( location, prefix, relations ) {
  let args = relations.map( eq );
  return (args.length === 1)
    ? args[0]
    : { op: { val: 'and', location }, args, location };

  function eq( refs ) {
    if (refs instanceof Array)
      return { op: { val: '=', location }, args: refs.map( ref ), location };
    else {
      let id = refs.name.id;
      return {
        op: { val: '=', location },
        args: [
          { path: [ { id: prefix, location }, { id, location } ], location },
          { path: [ { id, location } ], location } ],
        location
      };
    }
  }
  function ref( path ) {
    return { path: path.split('.').map( id => ({ id, location }) ), location };
  }
}

module.exports = define;
