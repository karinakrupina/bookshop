const _notInjected = () => {
  throw new Error('This method requires `cds` to be injected')
}

const _validateInjection = cds => {
  if (!cds || typeof cds !== 'object') {
    throw new Error('Injected value is not of type `cds`')
  }
}

const injection = {
  cds: {
    get builtin () {
      return require('@sap/cds-reflect').builtin
    },
    require (id) {
      return module.require(id)
    },
    load: _notInjected,
    linked: _notInjected,
    localize: _notInjected,
    compile: {
      to: {
        edm: _notInjected,
        edmx: _notInjected
      },
      for: {
        odata: _notInjected
      }
    },
    parse: {
      cql: _notInjected
    },
    service: {
      providers: []
    }
  },
  get builtin () {
    return injection.cds.builtin || { types: {} }
  },
  inject (cds) {
    _validateInjection(cds)

    injection.cds = cds
  },
  require (id) {
    return injection.cds.require(id)
  },
  load (...args) {
    return injection.cds.load(...args)
  },
  localize (...args) {
    return injection.cds.localize(...args)
  },
  compile: {
    to: {
      edm (...args) {
        return injection.cds.compile.to.edm(...args)
      },
      edmx (...args) {
        return injection.cds.compile.to.edmx(...args)
      }
    },
    for: {
      odata (...args) {
        return injection.cds.compile.for.odata(...args)
      }
    }
  },
  parse: {
    cql (...args) {
      return injection.cds.parse.cql(...args)
    },
    expr (...args) {
      return injection.cds.parse.expr(...args)
    }
  },
  get session () {
    return injection.cds.session
  },
  service: {
    get providers () {
      if (!injection.cds.service.providers) {
        injection.cds.service.providers = []
      }

      return injection.cds.service.providers
    },

    set providers (providers) {
      injection.cds.service.providers = providers
    }
  },
  get config () {
    return injection.cds.config || {}
  },
  get env () {
    return injection.cds.env || {}
  },
  linked (csn) {
    return injection.cds.linked(csn)
  }
}

module.exports = injection
