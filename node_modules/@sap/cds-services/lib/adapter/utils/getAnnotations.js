const _addRestriction = (event, restrict, annotations) => {
  if (!annotations.hasOwnProperty(event)) {
    annotations[event] = {}
  }
  if (restrict.to) {
    if (!annotations[event].hasOwnProperty('to')) {
      annotations[event].to = []
    }

    if (Array.isArray(restrict.to)) {
      annotations[event].to.push(...restrict.to)
    } else {
      annotations[event].to.push(restrict.to)
    }
  }
  if (restrict.where) {
    if (!annotations[event].where) {
      annotations[event].where = []
    }

    annotations[event].where.push(restrict.where)
  }
}

const _addRestrictions = (event, restrict, annotations) => {
  const list = []
  if (event === '*') {
    list.push('READ', 'CREATE', 'UPDATE', 'DELETE')
  } else if (event === 'WRITE') {
    list.push('CREATE', 'UPDATE', 'DELETE')
  } else {
    // READ, CREATE, UPDATE, DELETE, bound action
    list.push(event)
  }

  for (const method of list) {
    _addRestriction(method, restrict, annotations)
  }
}

/**
 * Collect entity annotations in form {EVENT: {to: [], where: []}}
 *
 * @param entity
 * @returns {object}
 *
 */
const getAnnotations = entity => {
  const annotations = {}

  const requires = entity['@requires']
  if (typeof requires === 'string' || Array.isArray(requires)) {
    _addRestrictions('*', { to: requires }, annotations)
  }

  if (entity['@restrict']) {
    for (const restrict of entity['@restrict']) {
      if (typeof restrict.grant === 'string') {
        _addRestrictions(restrict.grant, restrict, annotations)
      } else if (Array.isArray(restrict.grant)) {
        for (const event of restrict.grant) {
          _addRestrictions(event, restrict, annotations)
        }
      }
    }
  }

  return annotations
}

module.exports = getAnnotations
