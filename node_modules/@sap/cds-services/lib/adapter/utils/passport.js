const { FeatureNotSupported, getError } = require('../../errors')
const hasPackage = require('./hasPackage')

const _getBasicAuthHandler = credentials => {
  return (user, password, done) => {
    if (credentials[user] === password) {
      return done(null, { id: user })
    }

    return done(getError(401))
  }
}

const _basic = credentials => {
  const { BasicStrategy } = require('passport-http')
  return new BasicStrategy(_getBasicAuthHandler(credentials))
}

const _hasSecurity = definitions => {
  return Object.keys(definitions).some(key => {
    return definitions[key]['@restrict'] || definitions[key]['@requires']
  })
}

const _jwt = uaa => {
  const JWTStrategy = require('@sap/xssec').JWTStrategy
  return new JWTStrategy(require('../../services/utils/xsenv')('xsuaa', uaa))
}

const _getStrategy = options => {
  switch (options.passport.strategy) {
    case 'basic':
      return _basic(options.passport.credentials)
    case 'JWT':
      return _jwt(options.uaa)
    case 'dummy':
      return false
  }

  setImmediate(() => {
    throw new FeatureNotSupported(`Authentication strategy "${options.passport.strategy}" is not supported`)
  })
}

/**
 * In case there are security annotions and xssec is installed, auto configuration.
 * @param {Object} options
 * @param {Object} definitions
 * @private
 */
const _autoDetectStrategy = (options, definitions) => {
  if (!_hasSecurity(definitions)) {
    return
  }

  if (!hasPackage('passport')) {
    return false
  }

  if (hasPackage('@sap/xssec')) {
    options.passport = { strategy: 'JWT' }
  } else if (hasPackage('passport-http')) {
    options.passport = { strategy: 'basic', credentials: {} }
  } else {
    options.passport = { strategy: 'dummy' }
  }

  return _getStrategy(options)
}

/**
 *
 * @param {Object} options
 * @param definitions
 * @return {Authenticator|Passport}
 */
const getPassport = (options, definitions) => {
  const strategy = options.passport ? _getStrategy(options) : _autoDetectStrategy(options, definitions)

  if (!strategy) {
    return strategy
  }

  const passport = require('passport')
  passport.use(strategy)
  return passport
}

module.exports = getPassport
