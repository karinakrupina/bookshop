const { Components: { ACTION_EXECUTE_HANDLER } } = require('@sap/odata-server')
const getContextObject = require('../utils/context-object')
const { toODataResult } = require('../utils/event')
const { validateResourcePathLength } = require('../utils/request')

/**
 * Get the name of the action, which will be used as event name at the service.
 * @param {Object} service
 * @param {Object} context
 * @param {Object} req
 * @returns {string}
 * @private
 */
const _getEventName = (service, context, req) => {
  const pathSegments = req.getUriInfo().getPathSegments()
  const lastSegment = pathSegments[pathSegments.length - 1].getAction().getName()

  if (context.target) {
    return lastSegment
  }

  return `${service.name}.${lastSegment}`
}

/**
 * Get the returns object for the (un)bound action from CSN.
 * @param {Object} definitions
 * @param {Object} target
 * @param {string} actionName
 * @returns {*}
 * @private
 */
const _getTypeReturns = (definitions, target, actionName) => {
  // TODO Remove if draftPrepare, draftEdit and draftActivate actions are contained in new CSN
  if (actionName === 'draftPrepare' || actionName === 'draftEdit' || actionName === 'draftActivate') {
    return 'Other'
  }
  if (target) {
    return definitions[target.name].actions[actionName].returns
  }

  return definitions[actionName].returns
}

/**
 * Check if the return is an array or any other.
 * @param {Service} service
 * @param {Object} target
 * @param {string} actionName
 * @returns {string}
 * @private
 */
const _getActionReturnType = (service, target, actionName) => {
  const returns = _getTypeReturns(service.model.definitions, target, actionName)

  return returns && returns.items ? 'Array' : 'Other'
}

/**
 * Check the CSN which type needs to be returned.
 * If the result is not of this type, convert.
 * @param {string} returnType
 * @param {*} result
 * @returns {string|Object}
 * @private
 */
const _convertResult = (returnType, result) => {
  if (!Array.isArray(result) && returnType === 'Array') {
    return toODataResult([result])
  }

  if (Array.isArray(result) && returnType !== 'Array') {
    return toODataResult(result[0])
  }

  return toODataResult(result)
}

/**
 * The handler that will be registered with odata-v4.
 * @param {Service} service
 * @param {Object} options
 * @return {Function}
 */
const action = (service, options) => {
  return (req, res, next) => {
    // End here if length is greater then allowed
    validateResourcePathLength(req, options)

    const context = getContextObject(ACTION_EXECUTE_HANDLER, service, req, res)
    const actionName = _getEventName(service, context, req)

    service
      .processEvent(actionName, context)
      .then(result => {
        next(null, _convertResult(_getActionReturnType(service, context.target, actionName), result))
      })
      .catch(err => {
        next(err)
      })
  }
}

module.exports = action
