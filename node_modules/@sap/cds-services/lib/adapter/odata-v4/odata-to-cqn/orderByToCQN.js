const expressionToCQN = require('./expressionToCQN')
const { FeatureNotSupported } = require('../../../errors')
const odata = require('@sap/odata-server')
const { QueryOptions: { ORDERBY } } = odata
const ExpressionKind = odata.uri.Expression.ExpressionKind

const _buildNavRef = pathSegment => {
  return pathSegment.getProperty() ? pathSegment.getProperty().getName() : pathSegment.getNavigationProperty().getName()
}

const _orderExpression = order => {
  if (order.getExpression().getKind() === ExpressionKind.MEMBER) {
    let ref = []
    for (let i = 0; i < order.getExpression().getPathSegments().length; i++) {
      ref.push(_buildNavRef(order.getExpression().getPathSegments()[i]))
    }

    return {
      ref,
      sort: order.isDescending() ? 'desc' : 'asc'
    }
  }

  if (order.getExpression().getKind() === ExpressionKind.METHOD) {
    return expressionToCQN(order.getExpression())
  }

  throw new FeatureNotSupported(`QueryOption ${ORDERBY} with kind ${order.getExpression().getKind()} is not supported`)
}

const orderbyToCQN = (cqnPartial, orderBy) => {
  if (!orderBy || orderBy.length === 0) {
    return
  }

  if (!cqnPartial.orderBy) {
    cqnPartial.orderBy = []
  }

  for (const order of orderBy) {
    cqnPartial.orderBy.push(_orderExpression(order))
  }
}

module.exports = orderbyToCQN
