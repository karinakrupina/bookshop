const odata = require('@sap/odata-server')
const { BINARY, LITERAL, UNARY } = odata.uri.Expression.ExpressionKind
const { FeatureNotSupported } = require('../../../errors/index')

const _getExpressionKindName = kind => {
  for (const key of Object.keys(odata.uri.Expression.ExpressionKind)) {
    if (odata.uri.Expression.ExpressionKind[key] === kind) {
      return key
    }
  }

  return 'unknown'
}

const _searchRecursive = (columnList, search) => {
  switch (search.getKind()) {
    case BINARY:
      const operator = search.getOperator().toLowerCase()
      const left = _searchRecursive(columnList, search.getLeftOperand())
      const right = _searchRecursive(columnList, search.getRightOperand())
      return [...left, operator, ...right]
    case LITERAL:
      return [`${search.getText()}`]
    case UNARY:
      return [search.getOperator(), `${search.getOperand().getText()}`]
    default:
      throw new FeatureNotSupported(`Search expression ${_getExpressionKindName(search.getKind())} is not supported`)
  }
}

/**
 ** Convert a odata-v4 search expression object into an array.
 * @param columnList - columns to be searched
 * @param search - search term
 * @throws FeatureNotSupported - in case of any other expressions than BINARY, UNARY and LITERAL
 * @returns {*} - array to be used as input param in .where or .and of SELECT
 */
const searchToCQN = (columnList, search) => {
  switch (search.getKind()) {
    case BINARY:
      const operator = search.getOperator().toLowerCase()
      const left = _searchRecursive(columnList, search.getLeftOperand())
      const right = _searchRecursive(columnList, search.getRightOperand())
      return ['contains', columnList, [...left, operator, ...right]]
    case LITERAL:
      return ['contains', columnList, `${search.getText()}`]
    case UNARY:
      return ['not contains', columnList, `${search.getOperand().getText()}`]
    default:
      throw new FeatureNotSupported(`Search expression ${_getExpressionKindName(search.getKind())} is not supported`)
  }
}

module.exports = searchToCQN
