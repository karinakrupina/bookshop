const Base = require('./Base')
const CALLED = Symbol.for('continuationCalled')

/**
 * Class representation of before middleware.
 * @augments Base
 * @alias module:hooks.Before
 */
class Before extends Base {
  /**
   * Check if handlers are registered for event and entity. Execute all handlers that are registered,
   * with result being passed in as input parameter to the handler.
   *
   * Execute handlers (handler(request, response)) in given sequence.
   * Note that there are two scenarios: asynchronous handlers and synchronous handlers.
   * If handler has promise as return ensure sequence even though asynchrony.
   *
   * The event returns a Promise, that resolves, when the last handler is done.
   *
   * @param {string} event - name of the event like READ, UPDATE, ...
   * @param {Object} context - Contains request information and utility events like .send(), .error(), ...
   * @param {Object} context.target - the unreflected entity
   * @returns {Promise}
   */
  executeHandlerIfListed (event, context) {
    return new Promise((resolve, reject) => {
      this._addReply(resolve, context)
      this._addReject(reject, context)

      if (this._isTransactionEvent(event)) {
        return this._execute(event, context)
          .then(resolve)
          .catch(reject)
      }

      return this._execute(event, context)
        .then(val => {
          return this._handleErrors(context, val)
        })
        .then(resolve)
        .catch(reject)
    })
  }

  async _execute (event, context) {
    for (const entry of this._handlers) {
      if (context[CALLED]) {
        return
      }

      if (this._match(event, context, entry)) {
        const fnReturn = entry.handler(context)

        if (fnReturn && fnReturn.then) {
          await fnReturn
        }
      }
    }
  }
}

module.exports = Before
