const negotiateLocale = require('../../adapter/utils/locale')
const { convertDateTime } = require('../utils/handlerUtils')

const _valOf = user => {
  return () => {
    return user.id
  }
}

const _is = (user, attr) => {
  return role => {
    if (role === 'any') {
      return true
    }

    const scopes = attr.scopes || []

    if (role === 'authenticated-user' || role === 'identified-user') {
      return scopes.includes('openid')
    }

    for (const scope of scopes) {
      if (role === scope || `${attr.xsappname}.${role}` === scope) {
        return true
      }
    }

    return false
  }
}

const _has = user => {
  return roles => {
    return !roles.some(role => !user.is(role))
  }
}

const _extendUser = (context, defaultLocale) => {
  if (context._.req && context._.req.authInfo) {
    context.attr = context._.req.authInfo
  }

  context.user.valueOf = _valOf(context.user)
  context.user.toString = _valOf(context.user)
  context.user.is = _is(context.user, context.attr)
  context.user.has = _has(context.user)
  context.user.locale = negotiateLocale(context._, defaultLocale)
}

const _ensureUserAndAuth = context => {
  if (context._.req && context._.req.user) {
    context.user = context._.req.user
  }

  if (!context.user) {
    context.user = {
      id: 'anonymous'
    }
  }

  if (!context.attr) {
    context.attr = {
      scopes: []
    }
  }
}

const beforeAll = defaultLocale => {
  return context => {
    _ensureUserAndAuth(context)
    _extendUser(context, defaultLocale)

    if (context.target) {
      // check for target is made for unbound actions
      convertDateTime(context.data, context.target.elements)
    }
  }
}

module.exports = beforeAll
