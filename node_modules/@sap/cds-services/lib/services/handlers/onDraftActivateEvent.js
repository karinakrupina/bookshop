const { activeVersionExists } = require('../utils/draftUtils')
const { readAndDeleteKeywords, isActiveEntityRequested } = require('../utils/draftWhereUtils')
const { readDraftCompositionTree } = require('../utils/readDraftCompositionTree')
const { DB_CONNECTION_MISSING } = require('../utils/constants')
const { isDraftRootEntity } = require('../utils/compositionTree')

const _isLocked = (InProcessByUser, id) => InProcessByUser && InProcessByUser !== id

/**
 * Generic Handler for draftActivate requests.
 * In case of success it triggers an 'UPDATE' or 'CREATE' event.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onDraftActivate
 */
const onDraftActivateEvent = ({ service, localClient }) => async context => {
  // TODO: Write admin data to context. Beware: context.draft should not be used
  //       since active date needs to be modified (context.draft will be used as
  //       an indicator that only draft data is modified)
  if (!context.run) {
    context.log.warn(DB_CONNECTION_MISSING)
    context.reject(404)
  }

  if (
    isActiveEntityRequested(context.query.SELECT.where || []) ||
    context._.odataReq.getUriInfo().getPathSegments().length > 2 ||
    !isDraftRootEntity(service.model.definitions, context.target.name)
  ) {
    context.reject(400)
  }

  const draftCompositionTree = await readDraftCompositionTree(service, context)
  if (!draftCompositionTree.data) context.reject(404)

  if (_isLocked(draftCompositionTree.administrativeData.InProcessByUser, context.user.id)) {
    context.reject(403)
  }

  context.draftMetadata = draftCompositionTree.administrativeData

  // new objct to have 'real' object
  const data = Object.assign({}, draftCompositionTree.data[0][0])

  if (await activeVersionExists(context)) {
    readAndDeleteKeywords(['IsActiveEntity'], context.query.SELECT.where)
    return localClient
      .update(context.target)
      .set(data)
      .where(context.query.SELECT.where)
      .with(context)
  }

  return localClient
    .insert(context.target)
    .entries(data)
    .with(context)
}

module.exports = onDraftActivateEvent
