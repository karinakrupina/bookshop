const { getEnrichedCQN } = require('../utils/draftUtils')
const { readAndDeleteKeywords } = require('../utils/draftWhereUtils')
const { DB_CONNECTION_MISSING } = require('../utils/constants')

const idDraftAnnotated = entity => {
  return (
    entity['@Common.DraftRoot.PreparationAction'] === 'draftPrepare' ||
    entity['@Common.DraftNode.PreparationAction'] === 'draftPrepare'
  )
}

const _hasDraft = (definitions, cqn) => {
  if (idDraftAnnotated(definitions[cqn.SELECT.from.ref[cqn.SELECT.from.ref.length - 1]])) {
    return true
  }

  if (cqn.SELECT.where) {
    for (const element of cqn.SELECT.where) {
      if (element.SELECT && _hasDraft(definitions, element)) {
        return true
      }
    }
  }

  return false
}

const _modifyCQN = (cqnDraft, where, context) => {
  const whereDraft = [...where]
  const result = readAndDeleteKeywords(['IsActiveEntity'], whereDraft)
  cqnDraft.where(whereDraft)
  if (result && result.value.val === 'false') {
    cqnDraft.SELECT.from.ref[cqnDraft.SELECT.from.ref.length - 1] = `${
      cqnDraft.SELECT.from.ref[cqnDraft.SELECT.from.ref.length - 1]
    }_drafts`
  }

  for (let i = 0; i < cqnDraft.SELECT.where.length; i++) {
    const element = cqnDraft.SELECT.where[i]
    if (element.SELECT) {
      let subCqnDraft = context.statements.SELECT.from({
        ref: [...element.SELECT.from.ref],
        as: element.SELECT.from.as
      })

      cqnDraft.SELECT.where[i] = subCqnDraft
      _modifyCQN(subCqnDraft, element.SELECT.where, context)
    }
  }
}

/**
 * Generic Handler for READ requests.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onRead
 */
const getOnReadOverDraft = ({ service }) => context => {
  if (!context.run) {
    context.log.warn(DB_CONNECTION_MISSING)
    return Promise.resolve([])
  }

  const hasDraft = _hasDraft(service.model.definitions, context.query)
  if (hasDraft && context.query.SELECT.where && context.query.SELECT.where.length !== 0) {
    let cqnDraft = context.statements.SELECT.from({
      ref: [...context.query.SELECT.from.ref],
      as: context.query.SELECT.from.as
    })
    cqnDraft.SELECT.columns = context.query.SELECT.columns

    _modifyCQN(cqnDraft, context.query.SELECT.where, context)
    cqnDraft = getEnrichedCQN(cqnDraft, context.query.SELECT, [])
    return context.run(cqnDraft)
  }

  return context.run(context.query)
}

module.exports = getOnReadOverDraft
