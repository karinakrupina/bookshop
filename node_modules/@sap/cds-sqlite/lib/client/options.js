const { errors: { IllegalFunctionArgumentError } } = require('@sap/cds-sql')

const _validateDatabase = database => {
  if (!database) {
    throw new IllegalFunctionArgumentError('options.credentials.database')
  }
}

const _validatePool = options => {
  if (options.pool.min > options.pool.max) {
    throw new IllegalFunctionArgumentError('options.pool.min')
  }

  if (options.credentials.database === ':memory:') {
    if (options.pool.max !== 1) {
      throw new IllegalFunctionArgumentError('options.pool.max')
    }

    if (options.pool.evictionRunIntervalMillis !== 0) {
      throw new IllegalFunctionArgumentError('options.pool.evictionRunIntervalMillis')
    }

    if (options.pool.idleTimeoutMillisForPools !== 0) {
      throw new IllegalFunctionArgumentError('options.pool.idleTimeoutMillisForPools')
    }
  }
}

/**
 * Validates the connect and pool options and adds defaults if not given.
 * @param {Object} [options] - The db connection options.
 * @param {Object} [options.credentials] - The db connection options.
 * @param {Object} [options.credentials.database] - Alias for url.
 * @param {Object} [options.pool] - The min and max pool options.
 * @param {number} [options.pool.min] - The minimum number of db connection clients.
 * @param {number} [options.pool.max] - The maximum number of db connection clients.
 * @param {number} [options.pool.evictionRunIntervalMillis] - How often to run eviction checks.
 * @param {number} [options.pool.idleTimeoutMillisForPools] - The time interval in ms until an idle pool is evicted.
 * @throws {IllegalFunctionArgumentError}
 */
const options = options => {
  options.credentials = options.credentials || {}
  options.credentials.database = options.credentials.database || options.database || options.host || options.url

  options.pool.min = options.pool.min || 1
  options.pool.max = options.pool.max || (options.credentials.database === ':memory:' ? 1 : 10)
  options.pool.evictionRunIntervalMillis =
    options.pool.evictionRunIntervalMillis || (options.credentials.database === ':memory:' ? 0 : 10000)
  options.pool.idleTimeoutMillisForPools =
    options.pool.idleTimeoutMillisForPools || (options.credentials.database === ':memory:' ? 0 : 60000)

  _validateDatabase(options.credentials.database)
  _validatePool(options)
}

module.exports = options
